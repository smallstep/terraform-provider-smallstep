// Package v20250101 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v20250101

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	JWTScopes  = "JWT.Scopes"
	MtlsScopes = "mtls.Scopes"
)

// Defines values for AcmeAttestationProvisionerAttestationFormats.
const (
	Apple AcmeAttestationProvisionerAttestationFormats = "apple"
	Step  AcmeAttestationProvisionerAttestationFormats = "step"
	Tpm   AcmeAttestationProvisionerAttestationFormats = "tpm"
)

// Defines values for AcmeProvisionerChallenges.
const (
	Dns01     AcmeProvisionerChallenges = "dns-01"
	Http01    AcmeProvisionerChallenges = "http-01"
	TlsAlpn01 AcmeProvisionerChallenges = "tls-alpn-01"
)

// Defines values for AuthorityType.
const (
	AuthorityTypeAdvanced AuthorityType = "advanced"
	AuthorityTypeDevops   AuthorityType = "devops"
	AuthorityTypeManaged  AuthorityType = "managed"
)

// Defines values for DeviceOS.
const (
	IOS      DeviceOS = "iOS"
	Linux    DeviceOS = "Linux"
	MacOS    DeviceOS = "macOS"
	TvOS     DeviceOS = "tvOS"
	VisionOS DeviceOS = "visionOS"
	WatchOS  DeviceOS = "watchOS"
	Windows  DeviceOS = "Windows"
)

// Defines values for DeviceOwnership.
const (
	Company DeviceOwnership = "company"
	User    DeviceOwnership = "user"
)

// Defines values for NewAuthorityType.
const (
	NewAuthorityTypeAdvanced NewAuthorityType = "advanced"
	NewAuthorityTypeDevops   NewAuthorityType = "devops"
)

// Defines values for NewPlatformPlatformType.
const (
	NewPlatformPlatformTypeAws   NewPlatformPlatformType = "aws"
	NewPlatformPlatformTypeAzure NewPlatformPlatformType = "azure"
	NewPlatformPlatformTypeGcp   NewPlatformPlatformType = "gcp"
)

// Defines values for PlatformPlatformType.
const (
	PlatformPlatformTypeAws   PlatformPlatformType = "aws"
	PlatformPlatformTypeAzure PlatformPlatformType = "azure"
	PlatformPlatformTypeGcp   PlatformPlatformType = "gcp"
)

// Defines values for ProvisionerType.
const (
	ACME            ProvisionerType = "ACME"
	ACMEATTESTATION ProvisionerType = "ACME_ATTESTATION"
	AWS             ProvisionerType = "AWS"
	AZURE           ProvisionerType = "AZURE"
	GCP             ProvisionerType = "GCP"
	JWK             ProvisionerType = "JWK"
	OIDC            ProvisionerType = "OIDC"
	SCEP            ProvisionerType = "SCEP"
	X5C             ProvisionerType = "X5C"
)

// Defines values for ProvisionerWebhookCertType.
const (
	ALL  ProvisionerWebhookCertType = "ALL"
	SSH  ProvisionerWebhookCertType = "SSH"
	X509 ProvisionerWebhookCertType = "X509"
)

// Defines values for ProvisionerWebhookKind.
const (
	ENRICHING ProvisionerWebhookKind = "ENRICHING"
)

// Defines values for ProvisionerWebhookServerType.
const (
	EXTERNAL          ProvisionerWebhookServerType = "EXTERNAL"
	HOSTEDATTESTATION ProvisionerWebhookServerType = "HOSTED_ATTESTATION"
)

// Defines values for ScepProvisionerEncryptionAlgorithmIdentifier.
const (
	AES128CBC ScepProvisionerEncryptionAlgorithmIdentifier = "AES_128_CBC"
	AES128GCM ScepProvisionerEncryptionAlgorithmIdentifier = "AES_128_GCM"
	AES256CBC ScepProvisionerEncryptionAlgorithmIdentifier = "AES_256_CBC"
	AES256GCM ScepProvisionerEncryptionAlgorithmIdentifier = "AES_256_GCM"
	DESCBC    ScepProvisionerEncryptionAlgorithmIdentifier = "DES_CBC"
)

// Defines values for X509CertificateRevocationReason.
const (
	AACOMPROMISE         X509CertificateRevocationReason = "AA_COMPROMISE"
	AFFILIATIONCHANGED   X509CertificateRevocationReason = "AFFILIATION_CHANGED"
	CACOMPROMISE         X509CertificateRevocationReason = "CA_COMPROMISE"
	CERTIFICATEHOLD      X509CertificateRevocationReason = "CERTIFICATE_HOLD"
	CESSATIONOFOPERATION X509CertificateRevocationReason = "CESSATION_OF_OPERATION"
	KEYCOMPROMISE        X509CertificateRevocationReason = "KEY_COMPROMISE"
	PRIVILEGEWITHDRAWN   X509CertificateRevocationReason = "PRIVILEGE_WITHDRAWN"
	SUPERSEDED           X509CertificateRevocationReason = "SUPERSEDED"
	UNSPECIFIED          X509CertificateRevocationReason = "UNSPECIFIED"
)

// Defines values for X509IssuerKeyVersion.
const (
	ECSIGNP256SHA256       X509IssuerKeyVersion = "EC_SIGN_P256_SHA256"
	ECSIGNP384SHA384       X509IssuerKeyVersion = "EC_SIGN_P384_SHA384"
	RSASIGNPKCS12048SHA256 X509IssuerKeyVersion = "RSA_SIGN_PKCS1_2048_SHA256"
	RSASIGNPKCS13072SHA256 X509IssuerKeyVersion = "RSA_SIGN_PKCS1_3072_SHA256"
	RSASIGNPKCS14096SHA256 X509IssuerKeyVersion = "RSA_SIGN_PKCS1_4096_SHA256"
	RSASIGNPKCS14096SHA512 X509IssuerKeyVersion = "RSA_SIGN_PKCS1_4096_SHA512"
	RSASIGNPSS2048SHA256   X509IssuerKeyVersion = "RSA_SIGN_PSS_2048_SHA256"
	RSASIGNPSS3072SHA256   X509IssuerKeyVersion = "RSA_SIGN_PSS_3072_SHA256"
	RSASIGNPSS4096SHA256   X509IssuerKeyVersion = "RSA_SIGN_PSS_4096_SHA256"
	RSASIGNPSS4096SHA512   X509IssuerKeyVersion = "RSA_SIGN_PSS_4096_SHA512"
)

// Defines values for PostAuthJSONBodyAudience.
const (
	StepAgent PostAuthJSONBodyAudience = "step-agent"
)

// AcmeAttestationProvisioner A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [device-attest-01 challenge of the ACME protocol](https://smallstep.com/blog/acme-managed-device-attestation-explained/).
type AcmeAttestationProvisioner struct {
	// AttestationFormats The allowed attestation formats for the device-attest-01 challenge. Valid values are `apple`, `step`, and `tpm`. The apple format is for Apple devices, and adds trust for Apple's CAs. The step format is for non-TPM devices that can issue attestation certificates, such as YubiKey PIV. It adds trust for Yubico's root CA. The tpm format is for TPMs and does not trust any CAs by default.
	AttestationFormats []AcmeAttestationProvisionerAttestationFormats `json:"attestationFormats"`

	// AttestationRoots A trust bundle of root certificates in PEM format that will be used to verify attestation certificates. The default value depends on the value of attestationFormats. If provided, this PEM bundle will override the CA trust established by setting attestationFormats to apple or step. At least one root certificate is required when using the tpm attestationFormat.
	AttestationRoots *[]string `json:"attestationRoots,omitempty"`

	// ForceCN Force one of the SANs to become the Common Name, if a Common Name is not provided.
	ForceCN *bool `json:"forceCN,omitempty"`

	// RequireEAB Only ACME clients that have been preconfigured with valid EAB credentials will be able to create an account with this provisioner.
	RequireEAB *bool `json:"requireEAB,omitempty"`
}

// AcmeAttestationProvisionerAttestationFormats defines model for AcmeAttestationProvisioner.AttestationFormats.
type AcmeAttestationProvisionerAttestationFormats string

// AcmeProvisioner A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#acme) that enables automation with the [ACME protocol](https://smallstep.com/docs/step-ca/acme-basics/#acme-challenges).
type AcmeProvisioner struct {
	// Challenges Which ACME challenge types are allowed.
	Challenges []AcmeProvisionerChallenges `json:"challenges"`

	// ForceCN Force one of the SANs to become the Common Name, if a Common Name is not provided.
	ForceCN *bool `json:"forceCN,omitempty"`

	// RequireEAB Only ACME clients that have been preconfigured with valid EAB credentials will be able to create an account with this provisioner. Must be `true` for all new provisioners.
	RequireEAB bool `json:"requireEAB"`
}

// AcmeProvisionerChallenges defines model for AcmeProvisioner.Challenges.
type AcmeProvisionerChallenges string

// Authority An X509 authority hosted by Smallstep.
type Authority struct {
	// ActiveRevocation Whether CRL and OCSP are enabled (advanced authorities only).
	ActiveRevocation *bool `json:"activeRevocation,omitempty"`

	// AdminEmails Users that have admin access to manage the authority.
	AdminEmails *[]string `json:"adminEmails,omitempty"`

	// CreatedAt Timestamp when the authority was created.
	CreatedAt time.Time `json:"createdAt"`

	// Domain The domain where the authority can be reached.
	Domain string `json:"domain"`

	// Fingerprint The SHA-256 digest of the authority's root certificate in hex format.
	Fingerprint *string `json:"fingerprint,omitempty"`

	// Id A UUID identifying this authority.
	Id string `json:"id"`

	// Name The name of the authority.
	Name string `json:"name"`

	// Root The root certificate in pem format.
	Root *string `json:"root,omitempty"`

	// Type One of the available authority types
	Type AuthorityType `json:"type"`
}

// AuthorityCsr A certificate signing request for an X509 advanced authority with an external root.
type AuthorityCsr struct {
	// AuthorityID A UUID identifying the authority.
	AuthorityID string `json:"authorityID"`

	// Csr A certificate sigining request for the authority's intermediate issuer in pem format.
	Csr string `json:"csr"`

	// Id A UUID identifying this CSR.
	Id string `json:"id"`
}

// AuthorityType One of the available authority types
type AuthorityType string

// AwsAccounts The list of AWS account IDs that are allowed to use an AWS cloud provisioner.
type AwsAccounts = []string

// AwsDisableCustomSANs By default custom SANs are valid, but if this option is set to `true` only the SANs available in the instance identity document will be valid. These are the private IP and the DNS ip-<private-ip>.<region>.compute.internal.
type AwsDisableCustomSANs = bool

// AwsPlatform Configuration for an AWS platform.
type AwsPlatform struct {
	AccountId string `json:"accountId"`

	// Name A friendly name for this AWS account.
	Name string `json:"name"`

	// RoleArn A role ARN that allows the Smallstep Platform to manage resources on your behalf.
	RoleArn *string `json:"roleArn,omitempty"`
}

// AwsProvisioner The [AWS provisioner](https://smallstep.com/docs/step-ca/provisioners/#aws) grants a certificate to an Amazon EC2 instance using the Instance Identity Document.
type AwsProvisioner struct {
	// Accounts The list of AWS account IDs that are allowed to use an AWS cloud provisioner.
	Accounts AwsAccounts `json:"accounts"`

	// DisableCustomSANs By default custom SANs are valid, but if this option is set to `true` only the SANs available in the instance identity document will be valid. These are the private IP and the DNS ip-<private-ip>.<region>.compute.internal.
	DisableCustomSANs *AwsDisableCustomSANs `json:"disableCustomSANs,omitempty"`

	// DisableTrustOnFirstUse By default only one certificate will be granted per instance, but if the option is set to `true` this limit is not set and different tokens can be used to get different certificates.
	DisableTrustOnFirstUse *bool `json:"disableTrustOnFirstUse,omitempty"`

	// InstanceAge The maximum age of an instance that should be allowed to obtain a certificate. Limits certificate issuance to new instances to mitigate the risk of credential-misuse from instances that don't need a certificate. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	InstanceAge *InstanceAge `json:"instanceAge,omitempty"`
}

// AzureAudience Defaults to https://management.azure.com/ but it can be changed if necessary.
type AzureAudience = string

// AzureDisableCustomSANs By default custom SANs are valid, but if this option is set to `true` only the SANs available in the token will be valid, in Azure only the virtual machine name is available.
type AzureDisableCustomSANs = bool

// AzurePlatform Microsoft Azure
type AzurePlatform struct {
	// ClientId The client ID of an Azure Service Principal that allows the Smallstep Platform to manage resources on your behalf.
	ClientId *string `json:"clientId,omitempty"`

	// ClientSecret The client secret of an Azure Service Principal that allows the Smallstep Platform to manage resources on your behalf.
	ClientSecret *string `json:"clientSecret,omitempty"`

	// Name A friendly name for this Azure connection
	Name string `json:"name"`

	// ResourceGroups A list of resource groups that are allowed to enroll with the Smallstep Platform.
	ResourceGroups []string `json:"resourceGroups"`

	// TenantId The Azure Entra tenant ID
	TenantId string `json:"tenantId"`
}

// AzureProvisioner The [Azure provisioner](https://smallstep.com/docs/step-ca/provisioners/#azure) grants certificates to Microsoft Azure instances using the managed identities tokens.
type AzureProvisioner struct {
	// Audience Defaults to https://management.azure.com/ but it can be changed if necessary.
	Audience *AzureAudience `json:"audience,omitempty"`

	// DisableCustomSANs By default custom SANs are valid, but if this option is set to `true` only the SANs available in the token will be valid, in Azure only the virtual machine name is available.
	DisableCustomSANs *AzureDisableCustomSANs `json:"disableCustomSANs,omitempty"`

	// DisableTrustOnFirstUse By default only one certificate will be granted per instance, but if the option is set to true this limit is not set and different tokens can be used to get different certificates.
	DisableTrustOnFirstUse *bool `json:"disableTrustOnFirstUse,omitempty"`

	// ResourceGroups The list of resource group names that are allowed to use this provisioner.
	ResourceGroups AzureResourceGroups `json:"resourceGroups"`

	// TenantID The Azure account tenant ID for this provisioner. This ID is the Directory ID available in the Azure Active Directory properties.
	TenantID AzureTenantID `json:"tenantID"`
}

// AzureResourceGroups The list of resource group names that are allowed to use this provisioner.
type AzureResourceGroups = []string

// AzureTenantID The Azure account tenant ID for this provisioner. This ID is the Directory ID available in the Azure Active Directory properties.
type AzureTenantID = string

// BasicAuth Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
type BasicAuth struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// BasicConstraints defines model for basicConstraints.
type BasicConstraints struct {
	IsCA       bool `json:"isCA"`
	MaxPathLen int  `json:"maxPathLen"`
}

// Device defines model for device.
type Device struct {
	// ApprovedAt Timestamp in RFC3339 format when the device was approved to connect to company resources. Read only.
	ApprovedAt *time.Time `json:"approvedAt,omitempty"`

	// Connected The device is currently connected to Smallstep. Read only.
	Connected bool `json:"connected"`

	// DisplayId An opaque identifier that may be used to link this device to an external inventory.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	DisplayId *DeviceDisplayId `json:"displayId,omitempty"`

	// DisplayName A friendly name for the device.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	DisplayName *DeviceDisplayName `json:"displayName,omitempty"`

	// EnrolledAt Timestamp in RFC3339 format when the device first connected to Smallstep. Read only.
	EnrolledAt *time.Time `json:"enrolledAt,omitempty"`

	// HighAssurance The device has been issued certificates using high assurance device attestation. Read only.
	HighAssurance bool `json:"highAssurance"`

	// Id A UUID identifying this device. Read only.
	Id string `json:"id"`

	// LastSeen Timestamp in RFC3339 format when the device last connected to Smallstep. Read only.
	LastSeen *time.Time `json:"lastSeen,omitempty"`

	// Metadata A map of key-value pairs available as template data when a provisioner with a webhook is used to issue a certificate to a device.
	Metadata *DeviceMetadata `json:"metadata,omitempty"`

	// Os The device operating system.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Os *DeviceOS `json:"os,omitempty"`

	// Ownership Whether the device is owned by the user or the company.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Ownership *DeviceOwnership `json:"ownership,omitempty"`

	// PermanentIdentifier The cryptographic identity of the device. High-assurance devices are only issued certificates when this identifier is attested by a trusted source. All devices with the same permanent identifier appear as a single device in the Smallstep API. For Windows and Linux devices this is the hash of the TPM endorsement key and for Apple devices it is the serial number.
	PermanentIdentifier string `json:"permanentIdentifier"`

	// Serial The serial number of the device.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Serial *DeviceSerial `json:"serial,omitempty"`

	// Tags A set of tags that can be used to group devices.
	Tags *DeviceTags `json:"tags,omitempty"`

	// User The user that a device is assigned to. A device cannot be approved for high-assurance certificates until a user has been assigned to it.
	User *DeviceUser `json:"user,omitempty"`
}

// DeviceDisplayId An opaque identifier that may be used to link this device to an external inventory.
// This field may be populated with a value derived from data synced from your team's MDMs.
// Setting this value explicitly will mask any MDM-derived value.
type DeviceDisplayId = string

// DeviceDisplayName A friendly name for the device.
// This field may be populated with a value derived from data synced from your team's MDMs.
// Setting this value explicitly will mask any MDM-derived value.
type DeviceDisplayName = string

// DeviceMetadata A map of key-value pairs available as template data when a provisioner with a webhook is used to issue a certificate to a device.
type DeviceMetadata map[string]string

// DeviceOS The device operating system.
// This field may be populated with a value derived from data synced from your team's MDMs.
// Setting this value explicitly will mask any MDM-derived value.
type DeviceOS string

// DeviceOwnership Whether the device is owned by the user or the company.
// This field may be populated with a value derived from data synced from your team's MDMs.
// Setting this value explicitly will mask any MDM-derived value.
type DeviceOwnership string

// DevicePatch Data that can be modified on an existing device.
//
// Some device fields may be populated with a value derived from data synced from your team's MDMs.
// Any data that is explicitly set by API or with the Smallstep dashboard will mask MDM-derived values.
// Use this list to specify fields that should be unset. If the device includes data synced from an MDM
// this will result in the fields being populated with values derived from the MDM data. Otherwise the
// removed fields will be empty.
type DevicePatch struct {
	DisplayId   *DevicePatch_DisplayId   `json:"displayId,omitempty"`
	DisplayName *DevicePatch_DisplayName `json:"displayName,omitempty"`
	Metadata    *DevicePatch_Metadata    `json:"metadata,omitempty"`
	Os          *DevicePatch_Os          `json:"os,omitempty"`
	Ownership   *DevicePatch_Ownership   `json:"ownership,omitempty"`
	Serial      *DevicePatch_Serial      `json:"serial,omitempty"`
	Tags        *DevicePatch_Tags        `json:"tags,omitempty"`

	// User The user that a device is assigned to. A device cannot be approved for high-assurance certificates until it has an assigned user.
	User *DeviceUserPatch `json:"user,omitempty"`
}

// DevicePatchDisplayId1 defines model for .
type DevicePatchDisplayId1 = interface{}

// DevicePatch_DisplayId defines model for DevicePatch.DisplayId.
type DevicePatch_DisplayId struct {
	union json.RawMessage
}

// DevicePatchDisplayName1 defines model for .
type DevicePatchDisplayName1 = interface{}

// DevicePatch_DisplayName defines model for DevicePatch.DisplayName.
type DevicePatch_DisplayName struct {
	union json.RawMessage
}

// DevicePatchMetadata1 defines model for .
type DevicePatchMetadata1 = interface{}

// DevicePatch_Metadata defines model for DevicePatch.Metadata.
type DevicePatch_Metadata struct {
	union json.RawMessage
}

// DevicePatchOs1 defines model for .
type DevicePatchOs1 = interface{}

// DevicePatch_Os defines model for DevicePatch.Os.
type DevicePatch_Os struct {
	union json.RawMessage
}

// DevicePatchOwnership1 defines model for .
type DevicePatchOwnership1 = interface{}

// DevicePatch_Ownership defines model for DevicePatch.Ownership.
type DevicePatch_Ownership struct {
	union json.RawMessage
}

// DevicePatchSerial1 defines model for .
type DevicePatchSerial1 = interface{}

// DevicePatch_Serial defines model for DevicePatch.Serial.
type DevicePatch_Serial struct {
	union json.RawMessage
}

// DevicePatchTags1 defines model for .
type DevicePatchTags1 = interface{}

// DevicePatch_Tags defines model for DevicePatch.Tags.
type DevicePatch_Tags struct {
	union json.RawMessage
}

// DeviceRequest Data that can be added to a device record.
type DeviceRequest struct {
	// DisplayId An opaque identifier that may be used to link this device to an external inventory.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	DisplayId *DeviceDisplayId `json:"displayId,omitempty"`

	// DisplayName A friendly name for the device.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	DisplayName *DeviceDisplayName `json:"displayName,omitempty"`

	// Metadata A map of key-value pairs available as template data when a provisioner with a webhook is used to issue a certificate to a device.
	Metadata *DeviceMetadata `json:"metadata,omitempty"`

	// Os The device operating system.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Os *DeviceOS `json:"os,omitempty"`

	// Ownership Whether the device is owned by the user or the company.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Ownership *DeviceOwnership `json:"ownership,omitempty"`

	// PermanentIdentifier The cryptographic identity of the device. High-assurance devices are only issued certificates when this identifier is attested by a trusted source. All devices with the same permanent identifier appear as a single device in the Smallstep API. For Windows and Linux devices this is the hash of the TPM endorsement key and for Apple devices it is the serial number.
	PermanentIdentifier string `json:"permanentIdentifier"`

	// Serial The serial number of the device.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Serial *DeviceSerial `json:"serial,omitempty"`

	// Tags A set of tags that can be used to group devices.
	Tags *DeviceTags `json:"tags,omitempty"`

	// User The user that a device is assigned to. A device cannot be approved for high-assurance certificates until a user has been assigned to it.
	User *DeviceUser `json:"user,omitempty"`
}

// DeviceSerial The serial number of the device.
// This field may be populated with a value derived from data synced from your team's MDMs.
// Setting this value explicitly will mask any MDM-derived value.
type DeviceSerial = string

// DeviceTags A set of tags that can be used to group devices.
type DeviceTags = []string

// DeviceUser The user that a device is assigned to. A device cannot be approved for high-assurance certificates until a user has been assigned to it.
type DeviceUser struct {
	// DisplayName Full name of the user the device is assigned to. Synced from team's identity provider. Read only.
	DisplayName *string `json:"displayName,omitempty"`

	// Email Email of the user the device is assigned to.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Email string `json:"email"`
}

// DeviceUserPatch The user that a device is assigned to. A device cannot be approved for high-assurance certificates until it has an assigned user.
type DeviceUserPatch struct {
	// Email Email of the user the device is assigned to.
	// This field may be populated with a value derived from data synced from your team's MDMs.
	// Setting this value explicitly will mask any MDM-derived value.
	Email DeviceUserPatch_Email `json:"email"`
}

// DeviceUserPatchEmail0 defines model for .
type DeviceUserPatchEmail0 = interface{}

// DeviceUserPatchEmail1 defines model for .
type DeviceUserPatchEmail1 = string

// DeviceUserPatch_Email Email of the user the device is assigned to.
// This field may be populated with a value derived from data synced from your team's MDMs.
// Setting this value explicitly will mask any MDM-derived value.
type DeviceUserPatch_Email struct {
	union json.RawMessage
}

// DistinguishedName Name used in x509 certificates
type DistinguishedName struct {
	CommonName         *string `json:"commonName,omitempty"`
	Country            *string `json:"country,omitempty"`
	EmailAddress       *string `json:"emailAddress,omitempty"`
	Locality           *string `json:"locality,omitempty"`
	Organization       *string `json:"organization,omitempty"`
	OrganizationalUnit *string `json:"organizationalUnit,omitempty"`
	PostalCode         *string `json:"postalCode,omitempty"`
	Province           *string `json:"province,omitempty"`
	SerialNumber       *string `json:"serialNumber,omitempty"`
	StreetAddress      *string `json:"streetAddress,omitempty"`
}

// Error defines model for error.
type Error struct {
	// Message A description of the error.
	Message string `json:"message"`
}

// ExtraName defines model for extraName.
type ExtraName struct {
	Type  string      `json:"type"`
	Value interface{} `json:"value"`
}

// GcpDisableCustomSANs By default custom SANs are valid, but if this option is set to `true` only the SANs available in the instance identity document will be valid, these are the DNS `<instance-name>.c.<project-id>.internal` and `<instance-name>.<zone>.c.<project-id>.internal`.
type GcpDisableCustomSANs = bool

// GcpPlatform Google Cloud Platform
type GcpPlatform struct {
	// Name A friendly name for this GCP connection
	Name string `json:"name"`

	// ProjectIds The project IDs where the resources are located.
	ProjectIds []string `json:"projectIds"`

	// ServiceAccountKey A JSON-formatted service account key that allows the Smallstep Platform to manage resources on your behalf.
	ServiceAccountKey *string `json:"serviceAccountKey,omitempty"`

	// ServiceAccounts GCE service accounts that are allowed to enroll with the Smallstep Platform.
	ServiceAccounts *[]string `json:"serviceAccounts,omitempty"`
}

// GcpProjectIDs The list of project identifiers that are allowed to use a GCP cloud provisioner.
type GcpProjectIDs = []string

// GcpProvisioner The [GCP provisioner](https://smallstep.com/docs/step-ca/provisioners/#gcp) grants a certificate to a Google Compute Engine instance using its identity token. At least one service account or project ID must be set.
type GcpProvisioner struct {
	// DisableCustomSANs By default custom SANs are valid, but if this option is set to `true` only the SANs available in the instance identity document will be valid, these are the DNS `<instance-name>.c.<project-id>.internal` and `<instance-name>.<zone>.c.<project-id>.internal`.
	DisableCustomSANs *GcpDisableCustomSANs `json:"disableCustomSANs,omitempty"`

	// DisableTrustOnFirstUse By default only one certificate will be granted per instance, but if the option is set to `true` this limit is not set and different tokens can be used to get different certificates.
	DisableTrustOnFirstUse *bool `json:"disableTrustOnFirstUse,omitempty"`

	// InstanceAge The maximum age of an instance that should be allowed to obtain a certificate. Limits certificate issuance to new instances to mitigate the risk of credential-misuse from instances that don't need a certificate. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	InstanceAge *InstanceAge `json:"instanceAge,omitempty"`

	// ProjectIDs The list of project identifiers that are allowed to use a GCP cloud provisioner.
	ProjectIDs *GcpProjectIDs `json:"projectIDs,omitempty"`

	// ServiceAccounts The list of service accounts that are allowed to use a GCP cloud provisioner.
	ServiceAccounts *GcpServiceAccounts `json:"serviceAccounts,omitempty"`
}

// GcpServiceAccounts The list of service accounts that are allowed to use a GCP cloud provisioner.
type GcpServiceAccounts = []string

// InstanceAge The maximum age of an instance that should be allowed to obtain a certificate. Limits certificate issuance to new instances to mitigate the risk of credential-misuse from instances that don't need a certificate. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
type InstanceAge = string

// JwkProvisioner A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#jwk) that uses public-key cryptography to sign and validate a JSON Web Token (JWT).
type JwkProvisioner struct {
	// EncryptedKey The JWE encrypted private key.
	EncryptedKey *string `json:"encryptedKey,omitempty"`

	// Key The public JSON web key.
	Key interface{} `json:"key"`
}

// NameConstraints X509 certificate name constratins.
type NameConstraints struct {
	// Critical Whether or not name constraints are marked critical.
	Critical                *bool     `json:"critical,omitempty"`
	ExcludedDNSDomains      *[]string `json:"excludedDNSDomains,omitempty"`
	ExcludedEmailAddresses  *[]string `json:"excludedEmailAddresses,omitempty"`
	ExcludedIPRanges        *[]string `json:"excludedIPRanges,omitempty"`
	ExcludedURIDomains      *[]string `json:"excludedURIDomains,omitempty"`
	PermittedDNSDomains     *[]string `json:"permittedDNSDomains,omitempty"`
	PermittedEmailAddresses *[]string `json:"permittedEmailAddresses,omitempty"`
	PermittedIPRanges       *[]string `json:"permittedIPRanges,omitempty"`
	PermittedURIDomains     *[]string `json:"permittedURIDomains,omitempty"`
}

// NewAuthority The body of a request to create a new authority.
type NewAuthority struct {
	// ActiveRevocation Whether to enable CRL and OCSP on an advanced authority.
	ActiveRevocation *bool `json:"activeRevocation,omitempty"`

	// AdminEmails Users that will have admin access to manage the authority.
	AdminEmails []string `json:"adminEmails"`

	// IntermediateIssuer A Customized X509 issuer for an authority.
	IntermediateIssuer *X509Issuer `json:"intermediateIssuer,omitempty"`

	// Name The name of the authority.
	Name string `json:"name"`

	// RootIssuer A Customized X509 issuer for an authority.
	RootIssuer *X509Issuer `json:"rootIssuer,omitempty"`

	// Subdomain The new authority will be available at <subdomain>.<team slug>.ca.smallstep.com.
	Subdomain string `json:"subdomain"`

	// Type Create either a devops or advanced authority.
	Type NewAuthorityType `json:"type"`
}

// NewAuthorityType Create either a devops or advanced authority.
type NewAuthorityType string

// NewAuthorityCsr Body of a request to create a new X509 advanced authority with an external root.
type NewAuthorityCsr struct {
	// ActiveRevocation Whether to enable CRL and OCSP on the authority.
	ActiveRevocation *bool `json:"activeRevocation,omitempty"`

	// IntermediateIssuer A Customized X509 issuer for an authority.
	IntermediateIssuer X509Issuer `json:"intermediateIssuer"`

	// Name The name of the authority.
	Name string `json:"name"`

	// Subdomain The new authority will be available at <subdomain>.<team slug>.ca.smallstep.com.
	Subdomain string `json:"subdomain"`
}

// NewPlatform Configuration to create a new platform.
type NewPlatform struct {
	DisplayName           string                            `json:"displayName"`
	PlatformConfiguration NewPlatform_PlatformConfiguration `json:"platformConfiguration"`

	// PlatformType Determines which set of fields to use in platformConfiguration. Cannot be changed.
	PlatformType NewPlatformPlatformType `json:"platformType"`
	Slug         string                  `json:"slug"`
}

// NewPlatform_PlatformConfiguration defines model for NewPlatform.PlatformConfiguration.
type NewPlatform_PlatformConfiguration struct {
	union json.RawMessage
}

// NewPlatformPlatformType Determines which set of fields to use in platformConfiguration. Cannot be changed.
type NewPlatformPlatformType string

// OidcProvisioner A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#oauthoidc-single-sign-on) that is configured to trust and accept an OAuth provider's ID tokens for authentication. By default, the issued certificate will use the subject (sub) claim from the identity token as its subject. The value of the token's email claim is also included as an email SAN in the certificate.
type OidcProvisioner struct {
	// Admins The emails of admin users in an OpenID Connect provisioner. These users will not have restrictions in the certificates to sign.
	Admins *[]string `json:"admins,omitempty"`

	// ClientID The id used to validate the audience in an OpenID Connect token.
	ClientID string `json:"clientID"`

	// ClientSecret The secret used to obtain the OpenID Connect tokens.
	ClientSecret string `json:"clientSecret"`

	// ConfigurationEndpoint OpenID Connect configuration URL.
	ConfigurationEndpoint string `json:"configurationEndpoint"`

	// Domains The domains used to validate the email claim in an OpenID Connect provisioner.
	Domains *[]string `json:"domains,omitempty"`

	// Groups The group list used to validate the groups extension in an OpenID Connect token.
	Groups *[]string `json:"groups,omitempty"`

	// ListenAddress The callback address used in the OpenID Connect flow.
	ListenAddress *string `json:"listenAddress,omitempty"`

	// TenantID The tenant-id used to replace the templatized tenantid value in the OpenID Configuration.
	TenantID *string `json:"tenantID,omitempty"`
}

// Platform A platform with a list of configurations.
type Platform struct {
	DisplayName            string                                 `json:"displayName"`
	PlatformConfigurations []Platform_PlatformConfigurations_Item `json:"platformConfigurations"`

	// PlatformType The type used in platformConfiguration.
	PlatformType PlatformPlatformType `json:"platformType"`
	Slug         string               `json:"slug"`
}

// Platform_PlatformConfigurations_Item defines model for platform.platformConfigurations.Item.
type Platform_PlatformConfigurations_Item struct {
	union json.RawMessage
}

// PlatformPlatformType The type used in platformConfiguration.
type PlatformPlatformType string

// Provisioner defines model for provisioner.
type Provisioner struct {
	// Claims A set of constraints configuring how this provisioner can be used to issue certificates.
	Claims *ProvisionerClaims `json:"claims,omitempty"`

	// CreatedAt Timestamp of when the provisioner was created in RFC 3339 format. Generated server-side.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id A UUID identifying this provisioner. Generated server-side when the provisioner is created.
	Id *string `json:"id,omitempty"`

	// Name The name of the provisioner.
	Name string `json:"name"`

	// Options Options that apply when issuing certificates with this provisioner.
	Options *ProvisionerOptions `json:"options,omitempty"`

	// Type The type of provisioner.
	Type  ProvisionerType `json:"type"`
	union json.RawMessage
}

// ProvisionerType The type of provisioner.
type ProvisionerType string

// ProvisionerClaims A set of constraints configuring how this provisioner can be used to issue certificates.
type ProvisionerClaims struct {
	// AllowRenewalAfterExpiry Allow renewals for expired certificates generated by this provisioner.
	AllowRenewalAfterExpiry *bool `json:"allowRenewalAfterExpiry,omitempty"`

	// DefaultHostSSHCertDuration The default duration for an SSH host certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	DefaultHostSSHCertDuration *string `json:"defaultHostSSHCertDuration,omitempty"`

	// DefaultTLSCertDuration The default duration for an x509 certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	DefaultTLSCertDuration *string `json:"defaultTLSCertDuration,omitempty"`

	// DefaultUserSSHCertDuration The default duration for an SSH user certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	DefaultUserSSHCertDuration *string `json:"defaultUserSSHCertDuration,omitempty"`

	// DisableRenewal Disable renewal for all certificates generated by this provisioner.
	DisableRenewal *bool `json:"disableRenewal,omitempty"`

	// EnableSSHCA Allow this provisioner to be used to generate SSH certificates.
	EnableSSHCA *bool `json:"enableSSHCA,omitempty"`

	// MaxHostSSHCertDuration The maximum duration for an SSH host certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	MaxHostSSHCertDuration *string `json:"maxHostSSHCertDuration,omitempty"`

	// MaxTLSCertDuration The maximum duration for an x509 certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	MaxTLSCertDuration *string `json:"maxTLSCertDuration,omitempty"`

	// MaxUserSSHCertDuration The maximum duration for an SSH user certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	MaxUserSSHCertDuration *string `json:"maxUserSSHCertDuration,omitempty"`

	// MinHostSSHCertDuration The minimum duration for an SSH host certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	MinHostSSHCertDuration *string `json:"minHostSSHCertDuration,omitempty"`

	// MinTLSCertDuration The minimum duration for an x509 certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	MinTLSCertDuration *string `json:"minTLSCertDuration,omitempty"`

	// MinUserSSHCertDuration The minimum duration for an SSH user certificate generated by this provisioner. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	MinUserSSHCertDuration *string `json:"minUserSSHCertDuration,omitempty"`
}

// ProvisionerOptions Options that apply when issuing certificates with this provisioner.
type ProvisionerOptions struct {
	// Ssh Options that apply when issuing SSH certificates
	Ssh      *SshOptions           `json:"ssh,omitempty"`
	Webhooks *[]ProvisionerWebhook `json:"webhooks,omitempty"`

	// X509 Options that apply when issuing x509 certificates.
	X509 *X509Options `json:"x509,omitempty"`
}

// ProvisionerWebhook A [webhook](https://smallstep.com/docs/step-ca/webhooks/) to call when a certificate request is being processed.
type ProvisionerWebhook struct {
	// BasicAuth Configures provisioner webhook requests to include an Authorization header with these credentials. Optional for `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
	BasicAuth *BasicAuth `json:"basicAuth,omitempty"`

	// BearerToken Webhook requests will include an Authorization header with the token. Optional for `EXTERNAL` webhook servers; not allowed with hosted webhook servers. At most one of `bearerToken` and `basicAuth` may be set.
	BearerToken *string                    `json:"bearerToken,omitempty"`
	CertType    ProvisionerWebhookCertType `json:"certType"`

	// CollectionSlug For HOSTED_ATTESTATION webhooks, the collectionSlug is a reference to the collection that holds the devices that may be issued certificates. This collection must already exist. Required for `HOSTED_ATTESTATION` webhook servers; not allowed for `EXTERNAL`.
	CollectionSlug *string `json:"collectionSlug,omitempty"`

	// DisableTLSClientAuth The CA will not send a client certificate when requested by the webhook server. Optional for `EXTERNAL` webhook servers; not allowed with hosted webhook servers.
	DisableTLSClientAuth *bool `json:"disableTLSClientAuth,omitempty"`

	// Id UUID identifying this webhook. Generated server-side when the webhook is created. Will be sent to the webhook server in every request in the `X-Smallstep-Webhook-ID` header.
	Id *string `json:"id,omitempty"`

	// Kind The webhook kind indicates how and when it is called.
	//
	// ENRICHING webhooks are called before rendering the certificate template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner.
	Kind ProvisionerWebhookKind `json:"kind"`

	// Name The name of the webhook. For `ENRICHING` webhooks, the returned data can be referenced in the certificate under the path `.Webhooks.<name>`. Must be unique to the provisioner.
	Name string `json:"name"`

	// Secret The shared secret used to authenticate the payload sent to the webhook server. Generated server-side. This is returned only for `EXTERNAL` webhook servers and only once, at the time of creation.
	Secret *string `json:"secret,omitempty"`

	// ServerType An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the server.
	//
	// A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an instance in the configured collection. The data of the instance in the collection will be added to the template data.
	ServerType ProvisionerWebhookServerType `json:"serverType"`

	// Url The URL of the webhook server. Required for `EXTERNAL` webhook servers; read-only for hosted webhook servers.
	Url *string `json:"url,omitempty"`
}

// ProvisionerWebhookCertType defines model for ProvisionerWebhook.CertType.
type ProvisionerWebhookCertType string

// ProvisionerWebhookKind The webhook kind indicates how and when it is called.
//
// ENRICHING webhooks are called before rendering the certificate template. They have two functions. First, they must allow the certificate request or it will be aborted. Second, they can return additional data to be referenced in the certificate template. The payload sent to the webhook server varies based on whether an X509 or SSH certificate is to be signed and based on the type of provisioner.
type ProvisionerWebhookKind string

// ProvisionerWebhookServerType An EXTERNAL webhook server is not operated by Smallstep. The caller must use the returned ID and secret to configure the server.
//
// A HOSTED_ATTESTATION webhook server is hosted by Smallstep and must be used with an `ENRICHING` webhook type and an ACME Attestation provisioner. The webhook server will verify the attested permanent identifier exists as the ID of an instance in the configured collection. The data of the instance in the collection will be added to the template data.
type ProvisionerWebhookServerType string

// ScepProvisioner The [SCEP provisioner](https://smallstep.com/docs/step-ca/provisioners/#scep) grants certificates to clients using the SCEP protocol. This type is currently experimental and subject to change.
type ScepProvisioner struct {
	// AutogenerateDecrypter Automatically generate a new RSA decrypter instead of providing one.
	AutogenerateDecrypter *bool `json:"autogenerateDecrypter,omitempty"`

	// Challenge A static challenge secret.
	Challenge *string `json:"challenge,omitempty"`

	// DecrypterCertificate A pem-encoded certificate for an RSA public key.
	DecrypterCertificate *string `json:"decrypterCertificate,omitempty"`

	// DecrypterKey The pem-encoded RSA private key, corresponding to the certificate public key.
	DecrypterKey *string `json:"decrypterKey,omitempty"`

	// DecrypterKeyPassword The password for the pem-encoded RSA private key, if any.
	DecrypterKeyPassword *string `json:"decrypterKeyPassword,omitempty"`

	// EncryptionAlgorithmIdentifier The encryption algorithm used for encrypting responses to the SCEP client:
	//  * `DES_CBC`    - [DES in CBC mode](https://www.rfc-editor.org/rfc/rfc8018.html#appendix-B.2.1) - `1.3.14.3.2.7`
	//  * `AES_128_CBC` - [AES-128 in CBC mode](https://www.rfc-editor.org/rfc/rfc8018.html#appendix-B.2.5) - `2.16.840.1.101.3.4.1.2`
	//  * `AES_128_GCM` - [AES-128 in GCM mode](https://www.rfc-editor.org/rfc/rfc5084.html#section-3.2) - `2.16.840.1.101.3.4.1.6`
	//  * `AES_256_CBC` - [AES-256 in CBC mode](https://www.rfc-editor.org/rfc/rfc3565.html#section-4.1) - `2.16.840.1.101.3.4.1.42`
	//  * `AES_256_GCM` - [AES-256 in GCM mode](https://www.rfc-editor.org/rfc/rfc5084.html#section-3.2) - `2.16.840.1.101.3.4.1.46`
	EncryptionAlgorithmIdentifier *ScepProvisionerEncryptionAlgorithmIdentifier `json:"encryptionAlgorithmIdentifier,omitempty"`

	// ExcludeIntermediate Exclude the intermediate CA certificate in SCEP responses.
	ExcludeIntermediate *bool `json:"excludeIntermediate,omitempty"`

	// ForceCN Force one of the SANs to become the Common Name, if a Common Name is not provided.
	ForceCN *bool `json:"forceCN,omitempty"`

	// IncludeRoot Include the root CA certificate in SCEP responses.
	IncludeRoot *bool `json:"includeRoot,omitempty"`

	// MinimumPublicKeyLength The minimum number of bits for RSA public keys accepted in SCEP requests.
	MinimumPublicKeyLength *int `json:"minimumPublicKeyLength,omitempty"`
}

// ScepProvisionerEncryptionAlgorithmIdentifier The encryption algorithm used for encrypting responses to the SCEP client:
//   - `DES_CBC`    - [DES in CBC mode](https://www.rfc-editor.org/rfc/rfc8018.html#appendix-B.2.1) - `1.3.14.3.2.7`
//   - `AES_128_CBC` - [AES-128 in CBC mode](https://www.rfc-editor.org/rfc/rfc8018.html#appendix-B.2.5) - `2.16.840.1.101.3.4.1.2`
//   - `AES_128_GCM` - [AES-128 in GCM mode](https://www.rfc-editor.org/rfc/rfc5084.html#section-3.2) - `2.16.840.1.101.3.4.1.6`
//   - `AES_256_CBC` - [AES-256 in CBC mode](https://www.rfc-editor.org/rfc/rfc3565.html#section-4.1) - `2.16.840.1.101.3.4.1.42`
//   - `AES_256_GCM` - [AES-256 in GCM mode](https://www.rfc-editor.org/rfc/rfc5084.html#section-3.2) - `2.16.840.1.101.3.4.1.46`
type ScepProvisionerEncryptionAlgorithmIdentifier string

// SshOptions Options that apply when issuing SSH certificates
type SshOptions struct {
	// Template A JSON representation of the SSH certificate to be created. [More info](https://smallstep.com/docs/step-ca/templates/#ssh-templates).
	Template *string `json:"template,omitempty"`

	// TemplateData A map of data that can be used by the certificate template.
	TemplateData *interface{} `json:"templateData,omitempty"`
}

// Subject Name used in x509 certificates
type Subject struct {
	CommonName         *string      `json:"commonName,omitempty"`
	Country            *[]string    `json:"country,omitempty"`
	EmailAddress       *[]string    `json:"emailAddress,omitempty"`
	ExtraNames         *[]ExtraName `json:"extraNames,omitempty"`
	Locality           *[]string    `json:"locality,omitempty"`
	Organization       *[]string    `json:"organization,omitempty"`
	OrganizationalUnit *[]string    `json:"organizationalUnit,omitempty"`
	PostalCode         *[]string    `json:"postalCode,omitempty"`
	Province           *[]string    `json:"province,omitempty"`
	SerialNumber       *string      `json:"serialNumber,omitempty"`
	StreetAddress      *[]string    `json:"streetAddress,omitempty"`
}

// X509Certificate defines model for x509Certificate.
type X509Certificate struct {
	AuthorityKeyId        string           `json:"authorityKeyId"`
	BasicConstraints      BasicConstraints `json:"basicConstraints"`
	CrlDistributionPoints *[]string        `json:"crlDistributionPoints,omitempty"`
	DnsNames              *[]string        `json:"dnsNames,omitempty"`
	EmailAddresses        *[]string        `json:"emailAddresses,omitempty"`
	ExtKeyUsage           *[]string        `json:"extKeyUsage,omitempty"`
	IpAddresses           *[]string        `json:"ipAddresses,omitempty"`

	// Issuer Name used in x509 certificates
	Issuer                Subject   `json:"issuer"`
	IssuingCertificateURL *[]string `json:"issuingCertificateURL,omitempty"`
	KeyUsage              []string  `json:"keyUsage"`

	// NameConstraints X509 certificate name constratins.
	NameConstraints    *NameConstraints                 `json:"nameConstraints,omitempty"`
	OcspServer         *[]string                        `json:"ocspServer,omitempty"`
	Pem                string                           `json:"pem"`
	PolicyIdentifiers  *[]string                        `json:"policyIdentifiers,omitempty"`
	RevocationReason   *X509CertificateRevocationReason `json:"revocationReason,omitempty"`
	Revoked            *bool                            `json:"revoked,omitempty"`
	SerialNumber       string                           `json:"serialNumber"`
	SignatureAlgorithm string                           `json:"signatureAlgorithm"`

	// Subject Name used in x509 certificates
	Subject      Subject   `json:"subject"`
	SubjectKeyId string    `json:"subjectKeyId"`
	Uris         *[]string `json:"uris,omitempty"`
	Version      int       `json:"version"`
}

// X509CertificateRevocationReason defines model for X509Certificate.RevocationReason.
type X509CertificateRevocationReason string

// X509Issuer A Customized X509 issuer for an authority.
type X509Issuer struct {
	// Duration The certificate lifetime. Parsed as a [Golang duration](https://pkg.go.dev/time#ParseDuration).
	Duration *string `json:"duration,omitempty"`

	// KeyVersion The signature algorithm.
	KeyVersion    X509IssuerKeyVersion `json:"keyVersion"`
	MaxPathLength *int                 `json:"maxPathLength,omitempty"`

	// Name The name of the issuer.
	Name string `json:"name"`

	// NameConstraints X509 certificate name constratins.
	NameConstraints *NameConstraints `json:"nameConstraints,omitempty"`

	// Subject Name used in x509 certificates
	Subject *DistinguishedName `json:"subject,omitempty"`
}

// X509IssuerKeyVersion The signature algorithm.
type X509IssuerKeyVersion string

// X509Options Options that apply when issuing x509 certificates.
type X509Options struct {
	// Template A JSON representation of the x509 certificate to be created. [More info](https://smallstep.com/docs/step-ca/templates/#x509-templates).
	Template *string `json:"template,omitempty"`

	// TemplateData A map of data that can be used by the certificate template.
	TemplateData *interface{} `json:"templateData,omitempty"`
}

// X5cProvisioner A [provisioner](https://smallstep.com/docs/step-ca/provisioners/#x5c---x509-certificate) that authenticates a certificate request with an existing x509 certificate.
type X5cProvisioner struct {
	// Roots A list of pem-encoded x509 certificates. Any certificate bundle that chains up to any of these roots can be used in a certificate request.
	Roots []string `json:"roots"`
}

// Accept defines model for accept.
type Accept = string

// AuthorityDomainOrID defines model for authorityDomainOrID.
type AuthorityDomainOrID = string

// AuthorityID defines model for authorityID.
type AuthorityID = string

// DeviceID defines model for deviceID.
type DeviceID = string

// Pagination defines model for pagination.
type Pagination struct {
	// After Fetch a page of results other than the first page.
	// Must be copied from a previously returned X-Next-Cursor header.
	After *string `json:"after"`

	// First Limits the number of results returned.
	// Defaults to 100.
	First *int `json:"first"`
}

// PlatformSlug defines model for platformSlug.
type PlatformSlug = string

// ProvisionerNameOrID defines model for provisionerNameOrID.
type ProvisionerNameOrID = string

// RequestID defines model for requestID.
type RequestID = string

// SerialNumber defines model for serialNumber.
type SerialNumber = string

// WebhookNameOrID defines model for webhookNameOrID.
type WebhookNameOrID = string

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N403 defines model for 403.
type N403 = Error

// N404 defines model for 404.
type N404 = Error

// N409 defines model for 409.
type N409 = Error

// N412 defines model for 412.
type N412 = Error

// N422 defines model for 422.
type N422 = Error

// N500 defines model for 500.
type N500 = Error

// PostAuthJSONBody defines parameters for PostAuth.
type PostAuthJSONBody struct {
	Audience *PostAuthJSONBodyAudience `json:"audience,omitempty"`
	Bundle   *[]openapi_types.File     `json:"bundle,omitempty"`
	TeamID   *string                   `json:"teamID,omitempty"`
	TeamSlug *string                   `json:"teamSlug,omitempty"`
}

// PostAuthJSONBodyAudience defines parameters for PostAuth.
type PostAuthJSONBodyAudience string

// GetAuthoritiesParams defines parameters for GetAuthorities.
type GetAuthoritiesParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PostAuthoritiesParams defines parameters for PostAuthorities.
type PostAuthoritiesParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PostAuthoritiesCsrParams defines parameters for PostAuthoritiesCsr.
type PostAuthoritiesCsrParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// DeleteAuthorityParams defines parameters for DeleteAuthority.
type DeleteAuthorityParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// GetAuthorityParams defines parameters for GetAuthority.
type GetAuthorityParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// ListAuthorityProvisionersParams defines parameters for ListAuthorityProvisioners.
type ListAuthorityProvisionersParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PostAuthorityProvisionersParams defines parameters for PostAuthorityProvisioners.
type PostAuthorityProvisionersParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// DeleteProvisionerParams defines parameters for DeleteProvisioner.
type DeleteProvisionerParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// GetProvisionerParams defines parameters for GetProvisioner.
type GetProvisionerParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PostWebhooksParams defines parameters for PostWebhooks.
type PostWebhooksParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// DeleteWebhookParams defines parameters for DeleteWebhook.
type DeleteWebhookParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// GetWebhookParams defines parameters for GetWebhook.
type GetWebhookParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PostAuthorityRootJSONBody defines parameters for PostAuthorityRoot.
type PostAuthorityRootJSONBody struct {
	// AdminEmails Users that will have admin access to manage the authority
	AdminEmails []string `json:"adminEmails"`

	// Id The `id` returned from a previous call to `/authorities/csr`
	Id string `json:"id"`

	// IntermediatePEM The signed intermediate certificate
	IntermediatePEM string `json:"intermediatePEM"`

	// RootName A name for the external root issuer
	RootName string `json:"rootName"`

	// RootPEM The root certificate in pem format
	RootPEM string `json:"rootPEM"`
}

// PostAuthorityRootParams defines parameters for PostAuthorityRoot.
type PostAuthorityRootParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// ListCertificatesParams defines parameters for ListCertificates.
type ListCertificatesParams struct {
	// Pagination Paginate over a list of objects. Example: `?pagination[first]=30&pagination[after]=MTIzNA==`, which after encoding would be `?pagination%5Bfirst%5D=30&pagination%5Bafter%5D=MTIzNA==`
	Pagination *Pagination `json:"pagination,omitempty"`

	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// GetCertificateParams defines parameters for GetCertificate.
type GetCertificateParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PostDevicesParams defines parameters for PostDevices.
type PostDevicesParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// DeleteDeviceParams defines parameters for DeleteDevice.
type DeleteDeviceParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// GetDeviceParams defines parameters for GetDevice.
type GetDeviceParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PatchDeviceParams defines parameters for PatchDevice.
type PatchDeviceParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// GetPlatformsParams defines parameters for GetPlatforms.
type GetPlatformsParams struct {
	// Pagination Paginate over a list of objects. Example: `?pagination[first]=30&pagination[after]=MTIzNA==`, which after encoding would be `?pagination%5Bfirst%5D=30&pagination%5Bafter%5D=MTIzNA==`
	Pagination *Pagination `json:"pagination,omitempty"`

	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PutPlatformParams defines parameters for PutPlatform.
type PutPlatformParams struct {
	// XRequestId A request ID provided by the client. If not provided, the server will generate one. Will be reflected in responses.
	XRequestId *RequestID `json:"X-Request-Id,omitempty"`

	// Accept The content type the client is willing to accept. Also includes API version.
	Accept *Accept `json:"Accept,omitempty"`
}

// PostAuthJSONRequestBody defines body for PostAuth for application/json ContentType.
type PostAuthJSONRequestBody PostAuthJSONBody

// PostAuthoritiesJSONRequestBody defines body for PostAuthorities for application/json ContentType.
type PostAuthoritiesJSONRequestBody = NewAuthority

// PostAuthoritiesCsrJSONRequestBody defines body for PostAuthoritiesCsr for application/json ContentType.
type PostAuthoritiesCsrJSONRequestBody = NewAuthorityCsr

// PostAuthorityProvisionersJSONRequestBody defines body for PostAuthorityProvisioners for application/json ContentType.
type PostAuthorityProvisionersJSONRequestBody = Provisioner

// PostWebhooksJSONRequestBody defines body for PostWebhooks for application/json ContentType.
type PostWebhooksJSONRequestBody = ProvisionerWebhook

// PostAuthorityRootJSONRequestBody defines body for PostAuthorityRoot for application/json ContentType.
type PostAuthorityRootJSONRequestBody PostAuthorityRootJSONBody

// PostDevicesJSONRequestBody defines body for PostDevices for application/json ContentType.
type PostDevicesJSONRequestBody = DeviceRequest

// PatchDeviceJSONRequestBody defines body for PatchDevice for application/json ContentType.
type PatchDeviceJSONRequestBody = DevicePatch

// PutPlatformJSONRequestBody defines body for PutPlatform for application/json ContentType.
type PutPlatformJSONRequestBody = NewPlatform

// AsDeviceDisplayId returns the union data inside the DevicePatch_DisplayId as a DeviceDisplayId
func (t DevicePatch_DisplayId) AsDeviceDisplayId() (DeviceDisplayId, error) {
	var body DeviceDisplayId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceDisplayId overwrites any union data inside the DevicePatch_DisplayId as the provided DeviceDisplayId
func (t *DevicePatch_DisplayId) FromDeviceDisplayId(v DeviceDisplayId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceDisplayId performs a merge with any union data inside the DevicePatch_DisplayId, using the provided DeviceDisplayId
func (t *DevicePatch_DisplayId) MergeDeviceDisplayId(v DeviceDisplayId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDevicePatchDisplayId1 returns the union data inside the DevicePatch_DisplayId as a DevicePatchDisplayId1
func (t DevicePatch_DisplayId) AsDevicePatchDisplayId1() (DevicePatchDisplayId1, error) {
	var body DevicePatchDisplayId1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDevicePatchDisplayId1 overwrites any union data inside the DevicePatch_DisplayId as the provided DevicePatchDisplayId1
func (t *DevicePatch_DisplayId) FromDevicePatchDisplayId1(v DevicePatchDisplayId1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDevicePatchDisplayId1 performs a merge with any union data inside the DevicePatch_DisplayId, using the provided DevicePatchDisplayId1
func (t *DevicePatch_DisplayId) MergeDevicePatchDisplayId1(v DevicePatchDisplayId1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DevicePatch_DisplayId) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DevicePatch_DisplayId) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceDisplayName returns the union data inside the DevicePatch_DisplayName as a DeviceDisplayName
func (t DevicePatch_DisplayName) AsDeviceDisplayName() (DeviceDisplayName, error) {
	var body DeviceDisplayName
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceDisplayName overwrites any union data inside the DevicePatch_DisplayName as the provided DeviceDisplayName
func (t *DevicePatch_DisplayName) FromDeviceDisplayName(v DeviceDisplayName) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceDisplayName performs a merge with any union data inside the DevicePatch_DisplayName, using the provided DeviceDisplayName
func (t *DevicePatch_DisplayName) MergeDeviceDisplayName(v DeviceDisplayName) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDevicePatchDisplayName1 returns the union data inside the DevicePatch_DisplayName as a DevicePatchDisplayName1
func (t DevicePatch_DisplayName) AsDevicePatchDisplayName1() (DevicePatchDisplayName1, error) {
	var body DevicePatchDisplayName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDevicePatchDisplayName1 overwrites any union data inside the DevicePatch_DisplayName as the provided DevicePatchDisplayName1
func (t *DevicePatch_DisplayName) FromDevicePatchDisplayName1(v DevicePatchDisplayName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDevicePatchDisplayName1 performs a merge with any union data inside the DevicePatch_DisplayName, using the provided DevicePatchDisplayName1
func (t *DevicePatch_DisplayName) MergeDevicePatchDisplayName1(v DevicePatchDisplayName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DevicePatch_DisplayName) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DevicePatch_DisplayName) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceMetadata returns the union data inside the DevicePatch_Metadata as a DeviceMetadata
func (t DevicePatch_Metadata) AsDeviceMetadata() (DeviceMetadata, error) {
	var body DeviceMetadata
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceMetadata overwrites any union data inside the DevicePatch_Metadata as the provided DeviceMetadata
func (t *DevicePatch_Metadata) FromDeviceMetadata(v DeviceMetadata) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceMetadata performs a merge with any union data inside the DevicePatch_Metadata, using the provided DeviceMetadata
func (t *DevicePatch_Metadata) MergeDeviceMetadata(v DeviceMetadata) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDevicePatchMetadata1 returns the union data inside the DevicePatch_Metadata as a DevicePatchMetadata1
func (t DevicePatch_Metadata) AsDevicePatchMetadata1() (DevicePatchMetadata1, error) {
	var body DevicePatchMetadata1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDevicePatchMetadata1 overwrites any union data inside the DevicePatch_Metadata as the provided DevicePatchMetadata1
func (t *DevicePatch_Metadata) FromDevicePatchMetadata1(v DevicePatchMetadata1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDevicePatchMetadata1 performs a merge with any union data inside the DevicePatch_Metadata, using the provided DevicePatchMetadata1
func (t *DevicePatch_Metadata) MergeDevicePatchMetadata1(v DevicePatchMetadata1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DevicePatch_Metadata) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DevicePatch_Metadata) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceOS returns the union data inside the DevicePatch_Os as a DeviceOS
func (t DevicePatch_Os) AsDeviceOS() (DeviceOS, error) {
	var body DeviceOS
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceOS overwrites any union data inside the DevicePatch_Os as the provided DeviceOS
func (t *DevicePatch_Os) FromDeviceOS(v DeviceOS) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceOS performs a merge with any union data inside the DevicePatch_Os, using the provided DeviceOS
func (t *DevicePatch_Os) MergeDeviceOS(v DeviceOS) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDevicePatchOs1 returns the union data inside the DevicePatch_Os as a DevicePatchOs1
func (t DevicePatch_Os) AsDevicePatchOs1() (DevicePatchOs1, error) {
	var body DevicePatchOs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDevicePatchOs1 overwrites any union data inside the DevicePatch_Os as the provided DevicePatchOs1
func (t *DevicePatch_Os) FromDevicePatchOs1(v DevicePatchOs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDevicePatchOs1 performs a merge with any union data inside the DevicePatch_Os, using the provided DevicePatchOs1
func (t *DevicePatch_Os) MergeDevicePatchOs1(v DevicePatchOs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DevicePatch_Os) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DevicePatch_Os) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceOwnership returns the union data inside the DevicePatch_Ownership as a DeviceOwnership
func (t DevicePatch_Ownership) AsDeviceOwnership() (DeviceOwnership, error) {
	var body DeviceOwnership
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceOwnership overwrites any union data inside the DevicePatch_Ownership as the provided DeviceOwnership
func (t *DevicePatch_Ownership) FromDeviceOwnership(v DeviceOwnership) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceOwnership performs a merge with any union data inside the DevicePatch_Ownership, using the provided DeviceOwnership
func (t *DevicePatch_Ownership) MergeDeviceOwnership(v DeviceOwnership) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDevicePatchOwnership1 returns the union data inside the DevicePatch_Ownership as a DevicePatchOwnership1
func (t DevicePatch_Ownership) AsDevicePatchOwnership1() (DevicePatchOwnership1, error) {
	var body DevicePatchOwnership1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDevicePatchOwnership1 overwrites any union data inside the DevicePatch_Ownership as the provided DevicePatchOwnership1
func (t *DevicePatch_Ownership) FromDevicePatchOwnership1(v DevicePatchOwnership1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDevicePatchOwnership1 performs a merge with any union data inside the DevicePatch_Ownership, using the provided DevicePatchOwnership1
func (t *DevicePatch_Ownership) MergeDevicePatchOwnership1(v DevicePatchOwnership1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DevicePatch_Ownership) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DevicePatch_Ownership) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceSerial returns the union data inside the DevicePatch_Serial as a DeviceSerial
func (t DevicePatch_Serial) AsDeviceSerial() (DeviceSerial, error) {
	var body DeviceSerial
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceSerial overwrites any union data inside the DevicePatch_Serial as the provided DeviceSerial
func (t *DevicePatch_Serial) FromDeviceSerial(v DeviceSerial) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceSerial performs a merge with any union data inside the DevicePatch_Serial, using the provided DeviceSerial
func (t *DevicePatch_Serial) MergeDeviceSerial(v DeviceSerial) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDevicePatchSerial1 returns the union data inside the DevicePatch_Serial as a DevicePatchSerial1
func (t DevicePatch_Serial) AsDevicePatchSerial1() (DevicePatchSerial1, error) {
	var body DevicePatchSerial1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDevicePatchSerial1 overwrites any union data inside the DevicePatch_Serial as the provided DevicePatchSerial1
func (t *DevicePatch_Serial) FromDevicePatchSerial1(v DevicePatchSerial1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDevicePatchSerial1 performs a merge with any union data inside the DevicePatch_Serial, using the provided DevicePatchSerial1
func (t *DevicePatch_Serial) MergeDevicePatchSerial1(v DevicePatchSerial1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DevicePatch_Serial) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DevicePatch_Serial) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceTags returns the union data inside the DevicePatch_Tags as a DeviceTags
func (t DevicePatch_Tags) AsDeviceTags() (DeviceTags, error) {
	var body DeviceTags
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceTags overwrites any union data inside the DevicePatch_Tags as the provided DeviceTags
func (t *DevicePatch_Tags) FromDeviceTags(v DeviceTags) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceTags performs a merge with any union data inside the DevicePatch_Tags, using the provided DeviceTags
func (t *DevicePatch_Tags) MergeDeviceTags(v DeviceTags) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDevicePatchTags1 returns the union data inside the DevicePatch_Tags as a DevicePatchTags1
func (t DevicePatch_Tags) AsDevicePatchTags1() (DevicePatchTags1, error) {
	var body DevicePatchTags1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDevicePatchTags1 overwrites any union data inside the DevicePatch_Tags as the provided DevicePatchTags1
func (t *DevicePatch_Tags) FromDevicePatchTags1(v DevicePatchTags1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDevicePatchTags1 performs a merge with any union data inside the DevicePatch_Tags, using the provided DevicePatchTags1
func (t *DevicePatch_Tags) MergeDevicePatchTags1(v DevicePatchTags1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DevicePatch_Tags) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DevicePatch_Tags) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeviceUserPatchEmail0 returns the union data inside the DeviceUserPatch_Email as a DeviceUserPatchEmail0
func (t DeviceUserPatch_Email) AsDeviceUserPatchEmail0() (DeviceUserPatchEmail0, error) {
	var body DeviceUserPatchEmail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceUserPatchEmail0 overwrites any union data inside the DeviceUserPatch_Email as the provided DeviceUserPatchEmail0
func (t *DeviceUserPatch_Email) FromDeviceUserPatchEmail0(v DeviceUserPatchEmail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceUserPatchEmail0 performs a merge with any union data inside the DeviceUserPatch_Email, using the provided DeviceUserPatchEmail0
func (t *DeviceUserPatch_Email) MergeDeviceUserPatchEmail0(v DeviceUserPatchEmail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeviceUserPatchEmail1 returns the union data inside the DeviceUserPatch_Email as a DeviceUserPatchEmail1
func (t DeviceUserPatch_Email) AsDeviceUserPatchEmail1() (DeviceUserPatchEmail1, error) {
	var body DeviceUserPatchEmail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeviceUserPatchEmail1 overwrites any union data inside the DeviceUserPatch_Email as the provided DeviceUserPatchEmail1
func (t *DeviceUserPatch_Email) FromDeviceUserPatchEmail1(v DeviceUserPatchEmail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeviceUserPatchEmail1 performs a merge with any union data inside the DeviceUserPatch_Email, using the provided DeviceUserPatchEmail1
func (t *DeviceUserPatch_Email) MergeDeviceUserPatchEmail1(v DeviceUserPatchEmail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeviceUserPatch_Email) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeviceUserPatch_Email) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAwsPlatform returns the union data inside the NewPlatform_PlatformConfiguration as a AwsPlatform
func (t NewPlatform_PlatformConfiguration) AsAwsPlatform() (AwsPlatform, error) {
	var body AwsPlatform
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAwsPlatform overwrites any union data inside the NewPlatform_PlatformConfiguration as the provided AwsPlatform
func (t *NewPlatform_PlatformConfiguration) FromAwsPlatform(v AwsPlatform) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAwsPlatform performs a merge with any union data inside the NewPlatform_PlatformConfiguration, using the provided AwsPlatform
func (t *NewPlatform_PlatformConfiguration) MergeAwsPlatform(v AwsPlatform) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzurePlatform returns the union data inside the NewPlatform_PlatformConfiguration as a AzurePlatform
func (t NewPlatform_PlatformConfiguration) AsAzurePlatform() (AzurePlatform, error) {
	var body AzurePlatform
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzurePlatform overwrites any union data inside the NewPlatform_PlatformConfiguration as the provided AzurePlatform
func (t *NewPlatform_PlatformConfiguration) FromAzurePlatform(v AzurePlatform) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzurePlatform performs a merge with any union data inside the NewPlatform_PlatformConfiguration, using the provided AzurePlatform
func (t *NewPlatform_PlatformConfiguration) MergeAzurePlatform(v AzurePlatform) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGcpPlatform returns the union data inside the NewPlatform_PlatformConfiguration as a GcpPlatform
func (t NewPlatform_PlatformConfiguration) AsGcpPlatform() (GcpPlatform, error) {
	var body GcpPlatform
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGcpPlatform overwrites any union data inside the NewPlatform_PlatformConfiguration as the provided GcpPlatform
func (t *NewPlatform_PlatformConfiguration) FromGcpPlatform(v GcpPlatform) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGcpPlatform performs a merge with any union data inside the NewPlatform_PlatformConfiguration, using the provided GcpPlatform
func (t *NewPlatform_PlatformConfiguration) MergeGcpPlatform(v GcpPlatform) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t NewPlatform_PlatformConfiguration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NewPlatform_PlatformConfiguration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAwsPlatform returns the union data inside the Platform_PlatformConfigurations_Item as a AwsPlatform
func (t Platform_PlatformConfigurations_Item) AsAwsPlatform() (AwsPlatform, error) {
	var body AwsPlatform
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAwsPlatform overwrites any union data inside the Platform_PlatformConfigurations_Item as the provided AwsPlatform
func (t *Platform_PlatformConfigurations_Item) FromAwsPlatform(v AwsPlatform) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAwsPlatform performs a merge with any union data inside the Platform_PlatformConfigurations_Item, using the provided AwsPlatform
func (t *Platform_PlatformConfigurations_Item) MergeAwsPlatform(v AwsPlatform) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzurePlatform returns the union data inside the Platform_PlatformConfigurations_Item as a AzurePlatform
func (t Platform_PlatformConfigurations_Item) AsAzurePlatform() (AzurePlatform, error) {
	var body AzurePlatform
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzurePlatform overwrites any union data inside the Platform_PlatformConfigurations_Item as the provided AzurePlatform
func (t *Platform_PlatformConfigurations_Item) FromAzurePlatform(v AzurePlatform) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzurePlatform performs a merge with any union data inside the Platform_PlatformConfigurations_Item, using the provided AzurePlatform
func (t *Platform_PlatformConfigurations_Item) MergeAzurePlatform(v AzurePlatform) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGcpPlatform returns the union data inside the Platform_PlatformConfigurations_Item as a GcpPlatform
func (t Platform_PlatformConfigurations_Item) AsGcpPlatform() (GcpPlatform, error) {
	var body GcpPlatform
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGcpPlatform overwrites any union data inside the Platform_PlatformConfigurations_Item as the provided GcpPlatform
func (t *Platform_PlatformConfigurations_Item) FromGcpPlatform(v GcpPlatform) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGcpPlatform performs a merge with any union data inside the Platform_PlatformConfigurations_Item, using the provided GcpPlatform
func (t *Platform_PlatformConfigurations_Item) MergeGcpPlatform(v GcpPlatform) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Platform_PlatformConfigurations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Platform_PlatformConfigurations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOidcProvisioner returns the union data inside the Provisioner as a OidcProvisioner
func (t Provisioner) AsOidcProvisioner() (OidcProvisioner, error) {
	var body OidcProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOidcProvisioner overwrites any union data inside the Provisioner as the provided OidcProvisioner
func (t *Provisioner) FromOidcProvisioner(v OidcProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOidcProvisioner performs a merge with any union data inside the Provisioner, using the provided OidcProvisioner
func (t *Provisioner) MergeOidcProvisioner(v OidcProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsJwkProvisioner returns the union data inside the Provisioner as a JwkProvisioner
func (t Provisioner) AsJwkProvisioner() (JwkProvisioner, error) {
	var body JwkProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromJwkProvisioner overwrites any union data inside the Provisioner as the provided JwkProvisioner
func (t *Provisioner) FromJwkProvisioner(v JwkProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeJwkProvisioner performs a merge with any union data inside the Provisioner, using the provided JwkProvisioner
func (t *Provisioner) MergeJwkProvisioner(v JwkProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAcmeProvisioner returns the union data inside the Provisioner as a AcmeProvisioner
func (t Provisioner) AsAcmeProvisioner() (AcmeProvisioner, error) {
	var body AcmeProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAcmeProvisioner overwrites any union data inside the Provisioner as the provided AcmeProvisioner
func (t *Provisioner) FromAcmeProvisioner(v AcmeProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAcmeProvisioner performs a merge with any union data inside the Provisioner, using the provided AcmeProvisioner
func (t *Provisioner) MergeAcmeProvisioner(v AcmeProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAcmeAttestationProvisioner returns the union data inside the Provisioner as a AcmeAttestationProvisioner
func (t Provisioner) AsAcmeAttestationProvisioner() (AcmeAttestationProvisioner, error) {
	var body AcmeAttestationProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAcmeAttestationProvisioner overwrites any union data inside the Provisioner as the provided AcmeAttestationProvisioner
func (t *Provisioner) FromAcmeAttestationProvisioner(v AcmeAttestationProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAcmeAttestationProvisioner performs a merge with any union data inside the Provisioner, using the provided AcmeAttestationProvisioner
func (t *Provisioner) MergeAcmeAttestationProvisioner(v AcmeAttestationProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsX5cProvisioner returns the union data inside the Provisioner as a X5cProvisioner
func (t Provisioner) AsX5cProvisioner() (X5cProvisioner, error) {
	var body X5cProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromX5cProvisioner overwrites any union data inside the Provisioner as the provided X5cProvisioner
func (t *Provisioner) FromX5cProvisioner(v X5cProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeX5cProvisioner performs a merge with any union data inside the Provisioner, using the provided X5cProvisioner
func (t *Provisioner) MergeX5cProvisioner(v X5cProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAwsProvisioner returns the union data inside the Provisioner as a AwsProvisioner
func (t Provisioner) AsAwsProvisioner() (AwsProvisioner, error) {
	var body AwsProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAwsProvisioner overwrites any union data inside the Provisioner as the provided AwsProvisioner
func (t *Provisioner) FromAwsProvisioner(v AwsProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAwsProvisioner performs a merge with any union data inside the Provisioner, using the provided AwsProvisioner
func (t *Provisioner) MergeAwsProvisioner(v AwsProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGcpProvisioner returns the union data inside the Provisioner as a GcpProvisioner
func (t Provisioner) AsGcpProvisioner() (GcpProvisioner, error) {
	var body GcpProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGcpProvisioner overwrites any union data inside the Provisioner as the provided GcpProvisioner
func (t *Provisioner) FromGcpProvisioner(v GcpProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGcpProvisioner performs a merge with any union data inside the Provisioner, using the provided GcpProvisioner
func (t *Provisioner) MergeGcpProvisioner(v GcpProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureProvisioner returns the union data inside the Provisioner as a AzureProvisioner
func (t Provisioner) AsAzureProvisioner() (AzureProvisioner, error) {
	var body AzureProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureProvisioner overwrites any union data inside the Provisioner as the provided AzureProvisioner
func (t *Provisioner) FromAzureProvisioner(v AzureProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureProvisioner performs a merge with any union data inside the Provisioner, using the provided AzureProvisioner
func (t *Provisioner) MergeAzureProvisioner(v AzureProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScepProvisioner returns the union data inside the Provisioner as a ScepProvisioner
func (t Provisioner) AsScepProvisioner() (ScepProvisioner, error) {
	var body ScepProvisioner
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScepProvisioner overwrites any union data inside the Provisioner as the provided ScepProvisioner
func (t *Provisioner) FromScepProvisioner(v ScepProvisioner) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScepProvisioner performs a merge with any union data inside the Provisioner, using the provided ScepProvisioner
func (t *Provisioner) MergeScepProvisioner(v ScepProvisioner) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Provisioner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Claims != nil {
		object["claims"], err = json.Marshal(t.Claims)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'claims': %w", err)
		}
	}

	if t.CreatedAt != nil {
		object["createdAt"], err = json.Marshal(t.CreatedAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'createdAt': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	object["name"], err = json.Marshal(t.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if t.Options != nil {
		object["options"], err = json.Marshal(t.Options)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'options': %w", err)
		}
	}

	object["type"], err = json.Marshal(t.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *Provisioner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["claims"]; found {
		err = json.Unmarshal(raw, &t.Claims)
		if err != nil {
			return fmt.Errorf("error reading 'claims': %w", err)
		}
	}

	if raw, found := object["createdAt"]; found {
		err = json.Unmarshal(raw, &t.CreatedAt)
		if err != nil {
			return fmt.Errorf("error reading 'createdAt': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["options"]; found {
		err = json.Unmarshal(raw, &t.Options)
		if err != nil {
			return fmt.Errorf("error reading 'options': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthWithBody request with any body
	PostAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuth(ctx context.Context, body PostAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorities request
	GetAuthorities(ctx context.Context, params *GetAuthoritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthoritiesWithBody request with any body
	PostAuthoritiesWithBody(ctx context.Context, params *PostAuthoritiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthorities(ctx context.Context, params *PostAuthoritiesParams, body PostAuthoritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthoritiesCsrWithBody request with any body
	PostAuthoritiesCsrWithBody(ctx context.Context, params *PostAuthoritiesCsrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthoritiesCsr(ctx context.Context, params *PostAuthoritiesCsrParams, body PostAuthoritiesCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAuthority request
	DeleteAuthority(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *DeleteAuthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthority request
	GetAuthority(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *GetAuthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuthorityProvisioners request
	ListAuthorityProvisioners(ctx context.Context, authorityID AuthorityID, params *ListAuthorityProvisionersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthorityProvisionersWithBody request with any body
	PostAuthorityProvisionersWithBody(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthorityProvisioners(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, body PostAuthorityProvisionersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProvisioner request
	DeleteProvisioner(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *DeleteProvisionerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvisioner request
	GetProvisioner(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *GetProvisionerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWebhooksWithBody request with any body
	PostWebhooksWithBody(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWebhooks(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, body PostWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhook request
	DeleteWebhook(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhook request
	GetWebhook(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthorityRootWithBody request with any body
	PostAuthorityRootWithBody(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthorityRoot(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, body PostAuthorityRootJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCertificates request
	ListCertificates(ctx context.Context, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificate request
	GetCertificate(ctx context.Context, serialNumber SerialNumber, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDevicesWithBody request with any body
	PostDevicesWithBody(ctx context.Context, params *PostDevicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDevices(ctx context.Context, params *PostDevicesParams, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDevice request
	DeleteDevice(ctx context.Context, deviceID DeviceID, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDevice request
	GetDevice(ctx context.Context, deviceID DeviceID, params *GetDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDeviceWithBody request with any body
	PatchDeviceWithBody(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDevice(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, body PatchDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatforms request
	GetPlatforms(ctx context.Context, params *GetPlatformsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPlatformWithBody request with any body
	PutPlatformWithBody(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPlatform(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, body PutPlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuth(ctx context.Context, body PostAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorities(ctx context.Context, params *GetAuthoritiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthoritiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthoritiesWithBody(ctx context.Context, params *PostAuthoritiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthoritiesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthorities(ctx context.Context, params *PostAuthoritiesParams, body PostAuthoritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthoritiesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthoritiesCsrWithBody(ctx context.Context, params *PostAuthoritiesCsrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthoritiesCsrRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthoritiesCsr(ctx context.Context, params *PostAuthoritiesCsrParams, body PostAuthoritiesCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthoritiesCsrRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAuthority(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *DeleteAuthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAuthorityRequest(c.Server, authorityDomainOrID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthority(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *GetAuthorityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorityRequest(c.Server, authorityDomainOrID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthorityProvisioners(ctx context.Context, authorityID AuthorityID, params *ListAuthorityProvisionersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuthorityProvisionersRequest(c.Server, authorityID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthorityProvisionersWithBody(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthorityProvisionersRequestWithBody(c.Server, authorityID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthorityProvisioners(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, body PostAuthorityProvisionersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthorityProvisionersRequest(c.Server, authorityID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProvisioner(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *DeleteProvisionerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProvisionerRequest(c.Server, authorityID, provisionerNameOrID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvisioner(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *GetProvisionerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvisionerRequest(c.Server, authorityID, provisionerNameOrID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWebhooksWithBody(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWebhooksRequestWithBody(c.Server, authorityID, provisionerNameOrID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWebhooks(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, body PostWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWebhooksRequest(c.Server, authorityID, provisionerNameOrID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhook(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhookRequest(c.Server, authorityID, provisionerNameOrID, webhookNameOrID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhook(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookRequest(c.Server, authorityID, provisionerNameOrID, webhookNameOrID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthorityRootWithBody(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthorityRootRequestWithBody(c.Server, authorityID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthorityRoot(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, body PostAuthorityRootJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthorityRootRequest(c.Server, authorityID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCertificates(ctx context.Context, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCertificatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificate(ctx context.Context, serialNumber SerialNumber, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateRequest(c.Server, serialNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevicesWithBody(ctx context.Context, params *PostDevicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDevices(ctx context.Context, params *PostDevicesParams, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDevicesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDevice(ctx context.Context, deviceID DeviceID, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeviceRequest(c.Server, deviceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDevice(ctx context.Context, deviceID DeviceID, params *GetDeviceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeviceRequest(c.Server, deviceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDeviceWithBody(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDeviceRequestWithBody(c.Server, deviceID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDevice(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, body PatchDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDeviceRequest(c.Server, deviceID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatforms(ctx context.Context, params *GetPlatformsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlatformWithBody(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlatformRequestWithBody(c.Server, platformSlug, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlatform(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, body PutPlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlatformRequest(c.Server, platformSlug, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthRequest calls the generic PostAuth builder with application/json body
func NewPostAuthRequest(server string, body PostAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRequestWithBody generates requests for PostAuth with any type of body
func NewPostAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthoritiesRequest generates requests for GetAuthorities
func NewGetAuthoritiesRequest(server string, params *GetAuthoritiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPostAuthoritiesRequest calls the generic PostAuthorities builder with application/json body
func NewPostAuthoritiesRequest(server string, params *PostAuthoritiesParams, body PostAuthoritiesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthoritiesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAuthoritiesRequestWithBody generates requests for PostAuthorities with any type of body
func NewPostAuthoritiesRequestWithBody(server string, params *PostAuthoritiesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPostAuthoritiesCsrRequest calls the generic PostAuthoritiesCsr builder with application/json body
func NewPostAuthoritiesCsrRequest(server string, params *PostAuthoritiesCsrParams, body PostAuthoritiesCsrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthoritiesCsrRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAuthoritiesCsrRequestWithBody generates requests for PostAuthoritiesCsr with any type of body
func NewPostAuthoritiesCsrRequestWithBody(server string, params *PostAuthoritiesCsrParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/csr")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteAuthorityRequest generates requests for DeleteAuthority
func NewDeleteAuthorityRequest(server string, authorityDomainOrID AuthorityDomainOrID, params *DeleteAuthorityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityDomainOrID", runtime.ParamLocationPath, authorityDomainOrID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewGetAuthorityRequest generates requests for GetAuthority
func NewGetAuthorityRequest(server string, authorityDomainOrID AuthorityDomainOrID, params *GetAuthorityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityDomainOrID", runtime.ParamLocationPath, authorityDomainOrID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewListAuthorityProvisionersRequest generates requests for ListAuthorityProvisioners
func NewListAuthorityProvisionersRequest(server string, authorityID AuthorityID, params *ListAuthorityProvisionersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/provisioners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPostAuthorityProvisionersRequest calls the generic PostAuthorityProvisioners builder with application/json body
func NewPostAuthorityProvisionersRequest(server string, authorityID AuthorityID, params *PostAuthorityProvisionersParams, body PostAuthorityProvisionersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthorityProvisionersRequestWithBody(server, authorityID, params, "application/json", bodyReader)
}

// NewPostAuthorityProvisionersRequestWithBody generates requests for PostAuthorityProvisioners with any type of body
func NewPostAuthorityProvisionersRequestWithBody(server string, authorityID AuthorityID, params *PostAuthorityProvisionersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/provisioners", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteProvisionerRequest generates requests for DeleteProvisioner
func NewDeleteProvisionerRequest(server string, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *DeleteProvisionerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provisionerNameOrID", runtime.ParamLocationPath, provisionerNameOrID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/provisioners/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewGetProvisionerRequest generates requests for GetProvisioner
func NewGetProvisionerRequest(server string, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *GetProvisionerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provisionerNameOrID", runtime.ParamLocationPath, provisionerNameOrID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/provisioners/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPostWebhooksRequest calls the generic PostWebhooks builder with application/json body
func NewPostWebhooksRequest(server string, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, body PostWebhooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWebhooksRequestWithBody(server, authorityID, provisionerNameOrID, params, "application/json", bodyReader)
}

// NewPostWebhooksRequestWithBody generates requests for PostWebhooks with any type of body
func NewPostWebhooksRequestWithBody(server string, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provisionerNameOrID", runtime.ParamLocationPath, provisionerNameOrID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/provisioners/%s/webhooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteWebhookRequest generates requests for DeleteWebhook
func NewDeleteWebhookRequest(server string, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *DeleteWebhookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provisionerNameOrID", runtime.ParamLocationPath, provisionerNameOrID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "webhookNameOrID", runtime.ParamLocationPath, webhookNameOrID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/provisioners/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewGetWebhookRequest generates requests for GetWebhook
func NewGetWebhookRequest(server string, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *GetWebhookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provisionerNameOrID", runtime.ParamLocationPath, provisionerNameOrID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "webhookNameOrID", runtime.ParamLocationPath, webhookNameOrID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/provisioners/%s/webhooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPostAuthorityRootRequest calls the generic PostAuthorityRoot builder with application/json body
func NewPostAuthorityRootRequest(server string, authorityID AuthorityID, params *PostAuthorityRootParams, body PostAuthorityRootJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthorityRootRequestWithBody(server, authorityID, params, "application/json", bodyReader)
}

// NewPostAuthorityRootRequestWithBody generates requests for PostAuthorityRoot with any type of body
func NewPostAuthorityRootRequestWithBody(server string, authorityID AuthorityID, params *PostAuthorityRootParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authorityID", runtime.ParamLocationPath, authorityID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authorities/%s/root", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewListCertificatesRequest generates requests for ListCertificates
func NewListCertificatesRequest(server string, params *ListCertificatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pagination != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "pagination", runtime.ParamLocationQuery, *params.Pagination); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewGetCertificateRequest generates requests for GetCertificate
func NewGetCertificateRequest(server string, serialNumber SerialNumber, params *GetCertificateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serialNumber", runtime.ParamLocationPath, serialNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPostDevicesRequest calls the generic PostDevices builder with application/json body
func NewPostDevicesRequest(server string, params *PostDevicesParams, body PostDevicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDevicesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDevicesRequestWithBody generates requests for PostDevices with any type of body
func NewPostDevicesRequestWithBody(server string, params *PostDevicesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteDeviceRequest generates requests for DeleteDevice
func NewDeleteDeviceRequest(server string, deviceID DeviceID, params *DeleteDeviceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceID", runtime.ParamLocationPath, deviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewGetDeviceRequest generates requests for GetDevice
func NewGetDeviceRequest(server string, deviceID DeviceID, params *GetDeviceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceID", runtime.ParamLocationPath, deviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPatchDeviceRequest calls the generic PatchDevice builder with application/json body
func NewPatchDeviceRequest(server string, deviceID DeviceID, params *PatchDeviceParams, body PatchDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDeviceRequestWithBody(server, deviceID, params, "application/json", bodyReader)
}

// NewPatchDeviceRequestWithBody generates requests for PatchDevice with any type of body
func NewPatchDeviceRequestWithBody(server string, deviceID DeviceID, params *PatchDeviceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceID", runtime.ParamLocationPath, deviceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/devices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewGetPlatformsRequest generates requests for GetPlatforms
func NewGetPlatformsRequest(server string, params *GetPlatformsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platforms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Pagination != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "pagination", runtime.ParamLocationQuery, *params.Pagination); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

// NewPutPlatformRequest calls the generic PutPlatform builder with application/json body
func NewPutPlatformRequest(server string, platformSlug PlatformSlug, params *PutPlatformParams, body PutPlatformJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPlatformRequestWithBody(server, platformSlug, params, "application/json", bodyReader)
}

// NewPutPlatformRequestWithBody generates requests for PutPlatform with any type of body
func NewPutPlatformRequestWithBody(server string, platformSlug PlatformSlug, params *PutPlatformParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platformSlug", runtime.ParamLocationPath, platformSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platforms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XRequestId != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Request-Id", runtime.ParamLocationHeader, *params.XRequestId)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Request-Id", headerParam0)
		}

		if params.Accept != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, *params.Accept)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Accept", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthWithBodyWithResponse request with any body
	PostAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResponse, error)

	PostAuthWithResponse(ctx context.Context, body PostAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResponse, error)

	// GetAuthoritiesWithResponse request
	GetAuthoritiesWithResponse(ctx context.Context, params *GetAuthoritiesParams, reqEditors ...RequestEditorFn) (*GetAuthoritiesResponse, error)

	// PostAuthoritiesWithBodyWithResponse request with any body
	PostAuthoritiesWithBodyWithResponse(ctx context.Context, params *PostAuthoritiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthoritiesResponse, error)

	PostAuthoritiesWithResponse(ctx context.Context, params *PostAuthoritiesParams, body PostAuthoritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthoritiesResponse, error)

	// PostAuthoritiesCsrWithBodyWithResponse request with any body
	PostAuthoritiesCsrWithBodyWithResponse(ctx context.Context, params *PostAuthoritiesCsrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthoritiesCsrResponse, error)

	PostAuthoritiesCsrWithResponse(ctx context.Context, params *PostAuthoritiesCsrParams, body PostAuthoritiesCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthoritiesCsrResponse, error)

	// DeleteAuthorityWithResponse request
	DeleteAuthorityWithResponse(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *DeleteAuthorityParams, reqEditors ...RequestEditorFn) (*DeleteAuthorityResponse, error)

	// GetAuthorityWithResponse request
	GetAuthorityWithResponse(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *GetAuthorityParams, reqEditors ...RequestEditorFn) (*GetAuthorityResponse, error)

	// ListAuthorityProvisionersWithResponse request
	ListAuthorityProvisionersWithResponse(ctx context.Context, authorityID AuthorityID, params *ListAuthorityProvisionersParams, reqEditors ...RequestEditorFn) (*ListAuthorityProvisionersResponse, error)

	// PostAuthorityProvisionersWithBodyWithResponse request with any body
	PostAuthorityProvisionersWithBodyWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthorityProvisionersResponse, error)

	PostAuthorityProvisionersWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, body PostAuthorityProvisionersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthorityProvisionersResponse, error)

	// DeleteProvisionerWithResponse request
	DeleteProvisionerWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *DeleteProvisionerParams, reqEditors ...RequestEditorFn) (*DeleteProvisionerResponse, error)

	// GetProvisionerWithResponse request
	GetProvisionerWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *GetProvisionerParams, reqEditors ...RequestEditorFn) (*GetProvisionerResponse, error)

	// PostWebhooksWithBodyWithResponse request with any body
	PostWebhooksWithBodyWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWebhooksResponse, error)

	PostWebhooksWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, body PostWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWebhooksResponse, error)

	// DeleteWebhookWithResponse request
	DeleteWebhookWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error)

	// GetWebhookWithResponse request
	GetWebhookWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error)

	// PostAuthorityRootWithBodyWithResponse request with any body
	PostAuthorityRootWithBodyWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthorityRootResponse, error)

	PostAuthorityRootWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, body PostAuthorityRootJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthorityRootResponse, error)

	// ListCertificatesWithResponse request
	ListCertificatesWithResponse(ctx context.Context, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*ListCertificatesResponse, error)

	// GetCertificateWithResponse request
	GetCertificateWithResponse(ctx context.Context, serialNumber SerialNumber, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*GetCertificateResponse, error)

	// PostDevicesWithBodyWithResponse request with any body
	PostDevicesWithBodyWithResponse(ctx context.Context, params *PostDevicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error)

	PostDevicesWithResponse(ctx context.Context, params *PostDevicesParams, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error)

	// DeleteDeviceWithResponse request
	DeleteDeviceWithResponse(ctx context.Context, deviceID DeviceID, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*DeleteDeviceResponse, error)

	// GetDeviceWithResponse request
	GetDeviceWithResponse(ctx context.Context, deviceID DeviceID, params *GetDeviceParams, reqEditors ...RequestEditorFn) (*GetDeviceResponse, error)

	// PatchDeviceWithBodyWithResponse request with any body
	PatchDeviceWithBodyWithResponse(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDeviceResponse, error)

	PatchDeviceWithResponse(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, body PatchDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDeviceResponse, error)

	// GetPlatformsWithResponse request
	GetPlatformsWithResponse(ctx context.Context, params *GetPlatformsParams, reqEditors ...RequestEditorFn) (*GetPlatformsResponse, error)

	// PutPlatformWithBodyWithResponse request with any body
	PutPlatformWithBodyWithResponse(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlatformResponse, error)

	PutPlatformWithResponse(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, body PutPlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlatformResponse, error)
}

type PostAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSON400 *N400
	JSON401 *N401
	JSON403 *N403
	JSON500 *N500
}

// Status returns HTTPResponse.Status
func (r PostAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthoritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Authority
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetAuthoritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthoritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthoritiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Authority
	JSON400      *N400
	JSON401      *N401
	JSON409      *N409
	JSON412      *N412
	JSON422      *N422
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostAuthoritiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthoritiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthoritiesCsrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthorityCsr
	JSON400      *N400
	JSON401      *N401
	JSON409      *N409
	JSON412      *N412
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostAuthoritiesCsrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthoritiesCsrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAuthorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON422      *N422
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteAuthorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAuthorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authority
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetAuthorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuthorityProvisionersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Provisioner
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r ListAuthorityProvisionersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthorityProvisionersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthorityProvisionersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Provisioner
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON409      *N409
	JSON422      *N422
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostAuthorityProvisionersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthorityProvisionersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProvisionerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON422      *N422
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteProvisionerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProvisionerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvisionerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Provisioner
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetProvisionerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvisionerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProvisionerWebhook
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON409      *N409
	JSON412      *N412
	JSON422      *N422
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON422      *N422
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProvisionerWebhook
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthorityRootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Authority
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostAuthorityRootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthorityRootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]X509Certificate
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r ListCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *X509Certificate
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Device
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PostDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON404      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Device
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Device
	JSON400      *N400
	JSON401      *N401
	JSON404      *N404
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PatchDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Platform
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r GetPlatformsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPlatformResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Platform
	JSON400      *N400
	JSON401      *N401
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r PutPlatformResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPlatformResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthWithBodyWithResponse request with arbitrary body returning *PostAuthResponse
func (c *ClientWithResponses) PostAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResponse, error) {
	rsp, err := c.PostAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResponse(rsp)
}

func (c *ClientWithResponses) PostAuthWithResponse(ctx context.Context, body PostAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResponse, error) {
	rsp, err := c.PostAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResponse(rsp)
}

// GetAuthoritiesWithResponse request returning *GetAuthoritiesResponse
func (c *ClientWithResponses) GetAuthoritiesWithResponse(ctx context.Context, params *GetAuthoritiesParams, reqEditors ...RequestEditorFn) (*GetAuthoritiesResponse, error) {
	rsp, err := c.GetAuthorities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthoritiesResponse(rsp)
}

// PostAuthoritiesWithBodyWithResponse request with arbitrary body returning *PostAuthoritiesResponse
func (c *ClientWithResponses) PostAuthoritiesWithBodyWithResponse(ctx context.Context, params *PostAuthoritiesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthoritiesResponse, error) {
	rsp, err := c.PostAuthoritiesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthoritiesResponse(rsp)
}

func (c *ClientWithResponses) PostAuthoritiesWithResponse(ctx context.Context, params *PostAuthoritiesParams, body PostAuthoritiesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthoritiesResponse, error) {
	rsp, err := c.PostAuthorities(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthoritiesResponse(rsp)
}

// PostAuthoritiesCsrWithBodyWithResponse request with arbitrary body returning *PostAuthoritiesCsrResponse
func (c *ClientWithResponses) PostAuthoritiesCsrWithBodyWithResponse(ctx context.Context, params *PostAuthoritiesCsrParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthoritiesCsrResponse, error) {
	rsp, err := c.PostAuthoritiesCsrWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthoritiesCsrResponse(rsp)
}

func (c *ClientWithResponses) PostAuthoritiesCsrWithResponse(ctx context.Context, params *PostAuthoritiesCsrParams, body PostAuthoritiesCsrJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthoritiesCsrResponse, error) {
	rsp, err := c.PostAuthoritiesCsr(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthoritiesCsrResponse(rsp)
}

// DeleteAuthorityWithResponse request returning *DeleteAuthorityResponse
func (c *ClientWithResponses) DeleteAuthorityWithResponse(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *DeleteAuthorityParams, reqEditors ...RequestEditorFn) (*DeleteAuthorityResponse, error) {
	rsp, err := c.DeleteAuthority(ctx, authorityDomainOrID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAuthorityResponse(rsp)
}

// GetAuthorityWithResponse request returning *GetAuthorityResponse
func (c *ClientWithResponses) GetAuthorityWithResponse(ctx context.Context, authorityDomainOrID AuthorityDomainOrID, params *GetAuthorityParams, reqEditors ...RequestEditorFn) (*GetAuthorityResponse, error) {
	rsp, err := c.GetAuthority(ctx, authorityDomainOrID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorityResponse(rsp)
}

// ListAuthorityProvisionersWithResponse request returning *ListAuthorityProvisionersResponse
func (c *ClientWithResponses) ListAuthorityProvisionersWithResponse(ctx context.Context, authorityID AuthorityID, params *ListAuthorityProvisionersParams, reqEditors ...RequestEditorFn) (*ListAuthorityProvisionersResponse, error) {
	rsp, err := c.ListAuthorityProvisioners(ctx, authorityID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuthorityProvisionersResponse(rsp)
}

// PostAuthorityProvisionersWithBodyWithResponse request with arbitrary body returning *PostAuthorityProvisionersResponse
func (c *ClientWithResponses) PostAuthorityProvisionersWithBodyWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthorityProvisionersResponse, error) {
	rsp, err := c.PostAuthorityProvisionersWithBody(ctx, authorityID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthorityProvisionersResponse(rsp)
}

func (c *ClientWithResponses) PostAuthorityProvisionersWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityProvisionersParams, body PostAuthorityProvisionersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthorityProvisionersResponse, error) {
	rsp, err := c.PostAuthorityProvisioners(ctx, authorityID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthorityProvisionersResponse(rsp)
}

// DeleteProvisionerWithResponse request returning *DeleteProvisionerResponse
func (c *ClientWithResponses) DeleteProvisionerWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *DeleteProvisionerParams, reqEditors ...RequestEditorFn) (*DeleteProvisionerResponse, error) {
	rsp, err := c.DeleteProvisioner(ctx, authorityID, provisionerNameOrID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProvisionerResponse(rsp)
}

// GetProvisionerWithResponse request returning *GetProvisionerResponse
func (c *ClientWithResponses) GetProvisionerWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *GetProvisionerParams, reqEditors ...RequestEditorFn) (*GetProvisionerResponse, error) {
	rsp, err := c.GetProvisioner(ctx, authorityID, provisionerNameOrID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvisionerResponse(rsp)
}

// PostWebhooksWithBodyWithResponse request with arbitrary body returning *PostWebhooksResponse
func (c *ClientWithResponses) PostWebhooksWithBodyWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWebhooksResponse, error) {
	rsp, err := c.PostWebhooksWithBody(ctx, authorityID, provisionerNameOrID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWebhooksResponse(rsp)
}

func (c *ClientWithResponses) PostWebhooksWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, params *PostWebhooksParams, body PostWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWebhooksResponse, error) {
	rsp, err := c.PostWebhooks(ctx, authorityID, provisionerNameOrID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWebhooksResponse(rsp)
}

// DeleteWebhookWithResponse request returning *DeleteWebhookResponse
func (c *ClientWithResponses) DeleteWebhookWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error) {
	rsp, err := c.DeleteWebhook(ctx, authorityID, provisionerNameOrID, webhookNameOrID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookResponse(rsp)
}

// GetWebhookWithResponse request returning *GetWebhookResponse
func (c *ClientWithResponses) GetWebhookWithResponse(ctx context.Context, authorityID AuthorityID, provisionerNameOrID ProvisionerNameOrID, webhookNameOrID WebhookNameOrID, params *GetWebhookParams, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error) {
	rsp, err := c.GetWebhook(ctx, authorityID, provisionerNameOrID, webhookNameOrID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookResponse(rsp)
}

// PostAuthorityRootWithBodyWithResponse request with arbitrary body returning *PostAuthorityRootResponse
func (c *ClientWithResponses) PostAuthorityRootWithBodyWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthorityRootResponse, error) {
	rsp, err := c.PostAuthorityRootWithBody(ctx, authorityID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthorityRootResponse(rsp)
}

func (c *ClientWithResponses) PostAuthorityRootWithResponse(ctx context.Context, authorityID AuthorityID, params *PostAuthorityRootParams, body PostAuthorityRootJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthorityRootResponse, error) {
	rsp, err := c.PostAuthorityRoot(ctx, authorityID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthorityRootResponse(rsp)
}

// ListCertificatesWithResponse request returning *ListCertificatesResponse
func (c *ClientWithResponses) ListCertificatesWithResponse(ctx context.Context, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*ListCertificatesResponse, error) {
	rsp, err := c.ListCertificates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCertificatesResponse(rsp)
}

// GetCertificateWithResponse request returning *GetCertificateResponse
func (c *ClientWithResponses) GetCertificateWithResponse(ctx context.Context, serialNumber SerialNumber, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*GetCertificateResponse, error) {
	rsp, err := c.GetCertificate(ctx, serialNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateResponse(rsp)
}

// PostDevicesWithBodyWithResponse request with arbitrary body returning *PostDevicesResponse
func (c *ClientWithResponses) PostDevicesWithBodyWithResponse(ctx context.Context, params *PostDevicesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error) {
	rsp, err := c.PostDevicesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesResponse(rsp)
}

func (c *ClientWithResponses) PostDevicesWithResponse(ctx context.Context, params *PostDevicesParams, body PostDevicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDevicesResponse, error) {
	rsp, err := c.PostDevices(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDevicesResponse(rsp)
}

// DeleteDeviceWithResponse request returning *DeleteDeviceResponse
func (c *ClientWithResponses) DeleteDeviceWithResponse(ctx context.Context, deviceID DeviceID, params *DeleteDeviceParams, reqEditors ...RequestEditorFn) (*DeleteDeviceResponse, error) {
	rsp, err := c.DeleteDevice(ctx, deviceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeviceResponse(rsp)
}

// GetDeviceWithResponse request returning *GetDeviceResponse
func (c *ClientWithResponses) GetDeviceWithResponse(ctx context.Context, deviceID DeviceID, params *GetDeviceParams, reqEditors ...RequestEditorFn) (*GetDeviceResponse, error) {
	rsp, err := c.GetDevice(ctx, deviceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeviceResponse(rsp)
}

// PatchDeviceWithBodyWithResponse request with arbitrary body returning *PatchDeviceResponse
func (c *ClientWithResponses) PatchDeviceWithBodyWithResponse(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDeviceResponse, error) {
	rsp, err := c.PatchDeviceWithBody(ctx, deviceID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDeviceResponse(rsp)
}

func (c *ClientWithResponses) PatchDeviceWithResponse(ctx context.Context, deviceID DeviceID, params *PatchDeviceParams, body PatchDeviceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDeviceResponse, error) {
	rsp, err := c.PatchDevice(ctx, deviceID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDeviceResponse(rsp)
}

// GetPlatformsWithResponse request returning *GetPlatformsResponse
func (c *ClientWithResponses) GetPlatformsWithResponse(ctx context.Context, params *GetPlatformsParams, reqEditors ...RequestEditorFn) (*GetPlatformsResponse, error) {
	rsp, err := c.GetPlatforms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformsResponse(rsp)
}

// PutPlatformWithBodyWithResponse request with arbitrary body returning *PutPlatformResponse
func (c *ClientWithResponses) PutPlatformWithBodyWithResponse(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlatformResponse, error) {
	rsp, err := c.PutPlatformWithBody(ctx, platformSlug, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlatformResponse(rsp)
}

func (c *ClientWithResponses) PutPlatformWithResponse(ctx context.Context, platformSlug PlatformSlug, params *PutPlatformParams, body PutPlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlatformResponse, error) {
	rsp, err := c.PutPlatform(ctx, platformSlug, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlatformResponse(rsp)
}

// ParsePostAuthResponse parses an HTTP response from a PostAuthWithResponse call
func ParsePostAuthResponse(rsp *http.Response) (*PostAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthoritiesResponse parses an HTTP response from a GetAuthoritiesWithResponse call
func ParseGetAuthoritiesResponse(rsp *http.Response) (*GetAuthoritiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthoritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Authority
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthoritiesResponse parses an HTTP response from a PostAuthoritiesWithResponse call
func ParsePostAuthoritiesResponse(rsp *http.Response) (*PostAuthoritiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthoritiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Authority
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthoritiesCsrResponse parses an HTTP response from a PostAuthoritiesCsrWithResponse call
func ParsePostAuthoritiesCsrResponse(rsp *http.Response) (*PostAuthoritiesCsrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthoritiesCsrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthorityCsr
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAuthorityResponse parses an HTTP response from a DeleteAuthorityWithResponse call
func ParseDeleteAuthorityResponse(rsp *http.Response) (*DeleteAuthorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAuthorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAuthorityResponse parses an HTTP response from a GetAuthorityWithResponse call
func ParseGetAuthorityResponse(rsp *http.Response) (*GetAuthorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authority
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAuthorityProvisionersResponse parses an HTTP response from a ListAuthorityProvisionersWithResponse call
func ParseListAuthorityProvisionersResponse(rsp *http.Response) (*ListAuthorityProvisionersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuthorityProvisionersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Provisioner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthorityProvisionersResponse parses an HTTP response from a PostAuthorityProvisionersWithResponse call
func ParsePostAuthorityProvisionersResponse(rsp *http.Response) (*PostAuthorityProvisionersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthorityProvisionersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Provisioner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteProvisionerResponse parses an HTTP response from a DeleteProvisionerWithResponse call
func ParseDeleteProvisionerResponse(rsp *http.Response) (*DeleteProvisionerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProvisionerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetProvisionerResponse parses an HTTP response from a GetProvisionerWithResponse call
func ParseGetProvisionerResponse(rsp *http.Response) (*GetProvisionerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvisionerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Provisioner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostWebhooksResponse parses an HTTP response from a PostWebhooksWithResponse call
func ParsePostWebhooksResponse(rsp *http.Response) (*PostWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProvisionerWebhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookResponse parses an HTTP response from a DeleteWebhookWithResponse call
func ParseDeleteWebhookResponse(rsp *http.Response) (*DeleteWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetWebhookResponse parses an HTTP response from a GetWebhookWithResponse call
func ParseGetWebhookResponse(rsp *http.Response) (*GetWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProvisionerWebhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthorityRootResponse parses an HTTP response from a PostAuthorityRootWithResponse call
func ParsePostAuthorityRootResponse(rsp *http.Response) (*PostAuthorityRootResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthorityRootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Authority
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListCertificatesResponse parses an HTTP response from a ListCertificatesWithResponse call
func ParseListCertificatesResponse(rsp *http.Response) (*ListCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []X509Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetCertificateResponse parses an HTTP response from a GetCertificateWithResponse call
func ParseGetCertificateResponse(rsp *http.Response) (*GetCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest X509Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostDevicesResponse parses an HTTP response from a PostDevicesWithResponse call
func ParsePostDevicesResponse(rsp *http.Response) (*PostDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDeviceResponse parses an HTTP response from a DeleteDeviceWithResponse call
func ParseDeleteDeviceResponse(rsp *http.Response) (*DeleteDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDeviceResponse parses an HTTP response from a GetDeviceWithResponse call
func ParseGetDeviceResponse(rsp *http.Response) (*GetDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchDeviceResponse parses an HTTP response from a PatchDeviceWithResponse call
func ParsePatchDeviceResponse(rsp *http.Response) (*PatchDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Device
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPlatformsResponse parses an HTTP response from a GetPlatformsWithResponse call
func ParseGetPlatformsResponse(rsp *http.Response) (*GetPlatformsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Platform
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutPlatformResponse parses an HTTP response from a PutPlatformWithResponse call
func ParsePutPlatformResponse(rsp *http.Response) (*PutPlatformResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPlatformResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Platform
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+P8CAAD//2+4AUsrEQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
